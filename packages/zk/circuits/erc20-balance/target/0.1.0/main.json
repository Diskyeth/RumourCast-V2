{"noir_version":"0.38.0+e784523a15c0c233a5a794f28498635b7ce86325","hash":16862697485358770563,"abi":{"parameters":[{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"message_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"storage_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"storage_nodes","type":{"kind":"array","length":7,"type":{"kind":"array","length":532,"type":{"kind":"integer","sign":"unsigned","width":8}}},"visibility":"private"},{"name":"storage_leaf","type":{"kind":"array","length":69,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"storage_depth","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"storage_value","type":{"kind":"field"},"visibility":"private"},{"name":"chain_id","type":{"kind":"field"},"visibility":"private"},{"name":"block_number","type":{"kind":"field"},"visibility":"private"},{"name":"token_address","type":{"kind":"field"},"visibility":"private"},{"name":"balance_slot","type":{"kind":"field"},"visibility":"private"},{"name":"verified_balance","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"error_types":{}},"bytecode":"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","debug_symbols":"","file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"25":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(unsafe { field_less_than(b, a) });\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"27":{"source":"use crate::runtime::is_unconstrained;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[foreign(keccakf1600)]\nfn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n\n#[no_predicates]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n\nmod tests {\n    use super::keccak256;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19,\n            0x37, 0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca,\n            0x4b, 0x3b, 0x1a, 0xbf,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn hash_hello_world() {\n        let input = \"Hello world!\".as_bytes();\n        let result = [\n            0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n            0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n            0xea, 0xab,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn var_size_hash() {\n        let input = [\n            189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\n            206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,\n            223,\n        ];\n        let result = [\n            226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170,\n            219, 171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n        ];\n        assert_eq(keccak256(input, 13), result);\n    }\n\n    #[test]\n    fn hash_longer_than_136_bytes() {\n        let input = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"\n            .as_bytes();\n        assert(input.len() > 136);\n\n        let result = [\n            0x1d, 0xca, 0xeb, 0xdf, 0xd9, 0xd6, 0x24, 0x67, 0x1c, 0x18, 0x16, 0xda, 0xd, 0x8a, 0xeb,\n            0xa8, 0x75, 0x71, 0x2c, 0xc, 0x89, 0xe0, 0x25, 0x2, 0xe8, 0xb6, 0x5e, 0x16, 0x5, 0x55,\n            0xe4, 0x40,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n}\n","path":"std/hash/keccak.nr"},"28":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"36":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod schnorr;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod eddsa;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod ec;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod bigint;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(\n        crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y),\n    )\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\n","path":"std/lib.nr"},"64":{"source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n","path":"std/slice.nr"},"69":{"source":"use dep::lib::{ecrecover, proof};\n\nfn main(\n    // Address Data\n    signature: [u8; 64],\n    message_hash: [u8; 32],\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    // Storage Proof\n    storage_hash: [u8; 32],\n    storage_nodes: [[u8; 532]; 7],\n    storage_leaf: [u8; 69],\n    storage_depth: u64,\n    storage_value: Field,\n    // Verification Data\n    chain_id: Field,\n    block_number: Field,\n    token_address: Field,\n    balance_slot: Field,\n    // Balance Data\n    verified_balance: Field,\n) -> pub (Field, Field, Field, Field, Field, [u8; 32]) {\n    let balance_slot_bytes: [u8; 32] = balance_slot.to_be_bytes();\n    let address: [u8; 32] =\n        ecrecover::ecrecover(pub_key_x, pub_key_y, signature, message_hash).to_be_bytes();\n\n    let key = proof::get_storage_key([address, balance_slot_bytes]);\n    let value = proof::get_storage_value(storage_value);\n\n    proof::verify(\n        key,\n        value,\n        storage_hash,\n        storage_nodes,\n        storage_leaf,\n        storage_depth,\n    );\n\n    assert(!storage_value.lt(verified_balance), \"Attempt to verify too high balance\");\n\n    (verified_balance, chain_id, block_number, token_address, balance_slot, storage_hash)\n}\n\n#[test]\nfn test_main() {\n    let signature = [\n        0x2d, 0x37, 0xb1, 0x66, 0x31, 0xb6, 0x7c, 0xbe, 0x79, 0xe8, 0xb1, 0x15, 0xcd, 0xa1, 0xee,\n        0x74, 0xdd, 0xe8, 0x49, 0x2b, 0xee, 0xf9, 0xfa, 0xc0, 0x74, 0x67, 0x77, 0xc4, 0x63, 0xe0,\n        0xc8, 0xcc, 0x5c, 0xfd, 0x2c, 0xea, 0x5f, 0x1e, 0x2e, 0x6d, 0x88, 0x99, 0xe4, 0xfe, 0x33,\n        0xab, 0x70, 0x9a, 0x44, 0x9e, 0x26, 0x2c, 0xc9, 0xfc, 0x56, 0xc3, 0xd6, 0x3b, 0x78, 0x9d,\n        0x99, 0x27, 0x09, 0x54,\n    ];\n    let message_hash = [\n        0x9d, 0x44, 0x7d, 0x95, 0x6f, 0x18, 0xf0, 0x6e, 0xfc, 0x4e, 0x1f, 0xa2, 0xb7, 0x15, 0xe6,\n        0xa4, 0x6f, 0xe6, 0x80, 0xd3, 0xd3, 0x5e, 0x1e, 0xbe, 0x90, 0xb9, 0xd5, 0x6a, 0xd1, 0xed,\n        0xdc, 0xa1,\n    ];\n    let pub_key_x = [\n        0x12, 0x09, 0x76, 0x95, 0x85, 0xe7, 0xea, 0x6b, 0x1d, 0x48, 0xfb, 0x8e, 0x7a, 0x49, 0xad,\n        0x4a, 0x68, 0x7f, 0x3f, 0x21, 0x9c, 0x80, 0x2b, 0x16, 0x71, 0x32, 0xb3, 0x45, 0x6a, 0xd8,\n        0xd2, 0xe4,\n    ];\n    let pub_key_y = [\n        0x73, 0x32, 0x84, 0xca, 0x26, 0x7f, 0x3c, 0x5e, 0x6f, 0xa7, 0x5b, 0xad, 0xe8, 0x23, 0xfd,\n        0xab, 0xd5, 0xb4, 0xb6, 0xa9, 0x13, 0x85, 0xd1, 0xa6, 0xde, 0xd7, 0x6c, 0xb5, 0x5d, 0x73,\n        0x61, 0x1c,\n    ];\n    let balance_slot = 0;\n    let verified_balance = 0x27b7c8936148ec1a00001;\n    let storage_value = 0x27b7c8936148ec1a00001;\n    let storage_hash = [\n        0xfe, 0x24, 0x8f, 0x06, 0xea, 0xe1, 0xa1, 0x53, 0xfb, 0x78, 0x4d, 0x20, 0x48, 0x40, 0x71,\n        0x89, 0x2f, 0xc0, 0xcd, 0xcd, 0x8c, 0x7b, 0x76, 0x4c, 0xc6, 0xb4, 0xcf, 0x33, 0xfd, 0x33,\n        0xa5, 0x24,\n    ];\n    let storage_nodes = [\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x65, 0x4f, 0x43, 0xea, 0xba, 0x96, 0xcf, 0x57, 0x0d, 0xa0,\n            0x12, 0xb1, 0xc6, 0x47, 0xf4, 0xf4, 0x6d, 0x21, 0x0e, 0x9d, 0x96, 0xec, 0x81, 0x87,\n            0x26, 0x8d, 0xd3, 0x04, 0xa0, 0x78, 0xad, 0xb1, 0xa0, 0x27, 0x9e, 0x0a, 0xcb, 0xa7,\n            0xdf, 0x47, 0xd6, 0x00, 0x24, 0xc1, 0x21, 0x0b, 0x0e, 0xe0, 0x6b, 0x70, 0x11, 0x1f,\n            0xf1, 0xae, 0x08, 0x3a, 0x75, 0xe9, 0x2d, 0x07, 0x4c, 0x30, 0x3b, 0x8b, 0x3c, 0xa0,\n            0xf5, 0x9e, 0x78, 0x37, 0x07, 0xfd, 0x10, 0x5f, 0x6c, 0x4f, 0x10, 0x78, 0xfc, 0x2c,\n            0xeb, 0x68, 0xdd, 0xb2, 0x5a, 0x20, 0x10, 0x7f, 0xd5, 0xe6, 0x67, 0x6a, 0x6f, 0xe1,\n            0x6a, 0xed, 0x69, 0x66, 0xa0, 0x73, 0xba, 0x92, 0xc1, 0x7f, 0x06, 0x1b, 0xeb, 0xe2,\n            0xe9, 0x73, 0xc4, 0xdc, 0x40, 0x92, 0xdf, 0xf4, 0xb3, 0x19, 0x35, 0x3d, 0x37, 0xdb,\n            0x6d, 0x84, 0xde, 0x4e, 0x9a, 0xc9, 0x6a, 0xd7, 0x7c, 0xa0, 0x8c, 0xb6, 0xac, 0xfb,\n            0x9e, 0x40, 0x7c, 0x5a, 0x81, 0x47, 0xaa, 0xe8, 0xb6, 0xb3, 0x9e, 0x60, 0xf9, 0xf9,\n            0x36, 0x05, 0x24, 0x5e, 0xe1, 0xd4, 0xfb, 0xec, 0xa3, 0x2d, 0x7c, 0x30, 0x10, 0x43,\n            0xa0, 0xa5, 0x79, 0xf5, 0x94, 0x63, 0xa2, 0xbd, 0x14, 0xf2, 0x90, 0x97, 0x98, 0x68,\n            0xa0, 0x85, 0x48, 0xf1, 0x7b, 0x8a, 0x3b, 0x52, 0x1f, 0x98, 0x0a, 0xfd, 0x63, 0x77,\n            0x5b, 0x4c, 0xea, 0x5d, 0xed, 0xa0, 0x65, 0x4e, 0xa5, 0xea, 0xe7, 0x47, 0x8b, 0x91,\n            0x31, 0x2c, 0x6f, 0x50, 0x1a, 0xa9, 0x73, 0xcd, 0x43, 0xe9, 0xc1, 0xfe, 0x14, 0x2c,\n            0x3f, 0xba, 0x9a, 0xfd, 0x6c, 0x73, 0xac, 0xf8, 0x47, 0x48, 0xa0, 0x6b, 0x34, 0x79,\n            0xc5, 0x03, 0x42, 0x1a, 0xa5, 0x17, 0x1a, 0x2b, 0x08, 0xf6, 0xdc, 0x09, 0x47, 0x99,\n            0xd8, 0x69, 0x6f, 0x37, 0xc0, 0x03, 0xe3, 0x96, 0x65, 0x68, 0x5f, 0xa8, 0x03, 0x5c,\n            0x39, 0xa0, 0xb2, 0x0e, 0x17, 0x69, 0x66, 0x1c, 0xe3, 0x01, 0xbb, 0x52, 0x4c, 0x94,\n            0xd8, 0x07, 0xeb, 0xf3, 0x5e, 0x64, 0xc8, 0x5f, 0xd2, 0x7a, 0xd5, 0x48, 0xb7, 0x37,\n            0x46, 0x89, 0xa5, 0x93, 0x70, 0x37, 0xa0, 0xc9, 0x6b, 0xe2, 0xab, 0xb9, 0x6b, 0xeb,\n            0x11, 0xec, 0xdd, 0xfa, 0xbc, 0x23, 0x79, 0x88, 0x62, 0xbf, 0x92, 0x24, 0xd7, 0xaf,\n            0xd8, 0x92, 0x0a, 0x95, 0x84, 0x14, 0x3f, 0x65, 0x36, 0xa3, 0x01, 0xa0, 0xe1, 0xde,\n            0xfa, 0x28, 0xf4, 0x66, 0x72, 0xea, 0xf6, 0x39, 0x10, 0x6b, 0x3c, 0x4a, 0x72, 0x77,\n            0x71, 0x8d, 0x78, 0xe4, 0xe5, 0x29, 0xc8, 0x83, 0x5d, 0x41, 0x0c, 0x58, 0x8f, 0xda,\n            0x9d, 0xcf, 0xa0, 0xf1, 0x86, 0xde, 0x2f, 0xb4, 0x22, 0xa1, 0x4b, 0x50, 0x7e, 0x7a,\n            0x83, 0xdd, 0x81, 0x58, 0x65, 0xba, 0xa8, 0xe8, 0xe4, 0xb9, 0x33, 0xfd, 0xfd, 0x81,\n            0x82, 0xf8, 0x28, 0x9c, 0x88, 0xce, 0xf3, 0xa0, 0x77, 0x0e, 0x0a, 0x32, 0xe6, 0xf9,\n            0xdc, 0x7f, 0x3d, 0x37, 0xc7, 0xa0, 0x18, 0x47, 0x4b, 0x84, 0xbd, 0xdd, 0x68, 0x7d,\n            0x44, 0x50, 0x31, 0x17, 0x95, 0x0a, 0xb9, 0x03, 0x03, 0xbf, 0xbe, 0x1d, 0xa0, 0xa6,\n            0x7d, 0x8d, 0x6a, 0x30, 0xfa, 0x19, 0xf7, 0x2b, 0xb1, 0x2e, 0x90, 0xb5, 0x69, 0x6c,\n            0x8a, 0xbe, 0xbd, 0x71, 0x64, 0x61, 0x37, 0x91, 0x5f, 0xaa, 0x01, 0x4b, 0xbf, 0x69,\n            0xf1, 0x6c, 0x82, 0xa0, 0xfc, 0x02, 0xbb, 0x26, 0xc9, 0x2d, 0x42, 0x93, 0xc9, 0x7c,\n            0xae, 0xb2, 0x38, 0xeb, 0x71, 0xc2, 0x18, 0x4e, 0xc2, 0x42, 0xa1, 0xae, 0xcb, 0x48,\n            0x96, 0xf8, 0xfb, 0x20, 0xe6, 0xc3, 0xe8, 0x17, 0xa0, 0x06, 0xf9, 0xc9, 0xc5, 0x58,\n            0xa1, 0xe2, 0x92, 0x5a, 0x2b, 0xa8, 0xed, 0x39, 0xe5, 0xe3, 0x13, 0x71, 0xe8, 0xa3,\n            0x4d, 0x1a, 0xb7, 0xb8, 0xe5, 0x3d, 0x2a, 0xef, 0x36, 0x6d, 0xd9, 0xb4, 0x68, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x59, 0xf9, 0x19, 0x11, 0x94, 0x95, 0x9c, 0xd5, 0x6f, 0x85,\n            0x60, 0x1e, 0x5f, 0xa8, 0x4f, 0x43, 0x0d, 0x19, 0xe6, 0x97, 0xac, 0xa2, 0x05, 0xba,\n            0x85, 0x80, 0x9e, 0x95, 0xc6, 0x25, 0x79, 0x07, 0xa0, 0x0b, 0xde, 0xea, 0x0a, 0x72,\n            0x1c, 0xf8, 0x86, 0x19, 0xf6, 0x67, 0x40, 0x81, 0x89, 0x04, 0x32, 0xe6, 0xd0, 0x67,\n            0x42, 0x3d, 0x04, 0x9a, 0xbc, 0xdb, 0x6d, 0xd1, 0x91, 0x4f, 0x97, 0xd2, 0xce, 0xa0,\n            0x8c, 0x05, 0x6a, 0x88, 0x13, 0xcd, 0x3f, 0xb0, 0x71, 0x23, 0x47, 0x86, 0x6d, 0x7e,\n            0x3e, 0xcf, 0x8d, 0x89, 0x6c, 0x8b, 0xe9, 0xe4, 0x45, 0x11, 0x91, 0xbd, 0x93, 0x51,\n            0xb2, 0xe7, 0xcd, 0xad, 0xa0, 0xa0, 0xe3, 0xa7, 0x45, 0x78, 0x37, 0x52, 0xd5, 0x5b,\n            0x47, 0xbe, 0xd2, 0x01, 0x71, 0x2d, 0xab, 0xb8, 0x71, 0xc2, 0xac, 0xb6, 0x70, 0xf9,\n            0x2f, 0xd7, 0xb6, 0xd0, 0x32, 0x6a, 0x18, 0xea, 0xf0, 0xa0, 0xd4, 0x43, 0x4c, 0x0e,\n            0x2a, 0x5a, 0x39, 0x0b, 0x83, 0x8f, 0xcc, 0xc6, 0xf4, 0x06, 0xb5, 0x22, 0x83, 0x1e,\n            0x76, 0x7a, 0x71, 0xe7, 0x49, 0x44, 0x0b, 0x94, 0x59, 0x6b, 0xcc, 0xde, 0xde, 0xba,\n            0xa0, 0xa6, 0xf0, 0x7c, 0xc7, 0x97, 0x75, 0x7d, 0x20, 0xde, 0x26, 0x7d, 0x3f, 0x5f,\n            0x94, 0x66, 0x8a, 0x57, 0x01, 0x0d, 0xca, 0x08, 0x40, 0x4a, 0xfd, 0xe5, 0x87, 0xc5,\n            0xd8, 0x7d, 0x43, 0x7c, 0x2e, 0xa0, 0x26, 0x79, 0x87, 0xbd, 0x89, 0x8a, 0x37, 0x9b,\n            0x0c, 0xdb, 0x7c, 0x71, 0x29, 0x85, 0xcb, 0x04, 0x9b, 0x42, 0xc0, 0x1b, 0x9c, 0x2e,\n            0x8e, 0x6d, 0x95, 0xe8, 0xde, 0xa3, 0x1d, 0x0b, 0xdb, 0xe7, 0xa0, 0xa0, 0x86, 0x60,\n            0x89, 0xdd, 0x0c, 0xb0, 0xdf, 0x1f, 0x13, 0xfc, 0xa9, 0x3a, 0xf8, 0xca, 0xf4, 0x14,\n            0xf9, 0xa9, 0xbc, 0x87, 0xc5, 0x2c, 0x01, 0x89, 0x0b, 0x0d, 0x59, 0x06, 0x3a, 0x30,\n            0x22, 0xa0, 0x34, 0x3a, 0x91, 0xc4, 0x0e, 0xcb, 0x80, 0xa1, 0x94, 0xec, 0xea, 0xc5,\n            0x13, 0x3f, 0x1c, 0xfd, 0x2c, 0x81, 0x9c, 0xf7, 0xbe, 0x12, 0x46, 0x7d, 0x25, 0x25,\n            0x24, 0x61, 0xbc, 0x40, 0x5f, 0x75, 0xa0, 0xc5, 0x31, 0x34, 0x9f, 0xad, 0xdc, 0xfd,\n            0x82, 0x23, 0x66, 0xdd, 0x3b, 0x44, 0x78, 0xc3, 0xe2, 0x32, 0xc9, 0x07, 0x27, 0x65,\n            0x8e, 0x86, 0x5d, 0x07, 0xda, 0xb2, 0x6d, 0x5c, 0x94, 0xea, 0x60, 0xa0, 0x2b, 0xb8,\n            0x7e, 0x12, 0xf9, 0xae, 0xbd, 0x86, 0x0b, 0x78, 0x4d, 0x22, 0x48, 0x84, 0x69, 0x35,\n            0x9b, 0xbd, 0x9e, 0xc3, 0xe6, 0xcc, 0x03, 0x15, 0x45, 0x97, 0xdc, 0x5f, 0xc1, 0x68,\n            0xd7, 0xee, 0xa0, 0xd7, 0xe6, 0x2f, 0x5c, 0xab, 0x31, 0x69, 0x49, 0x70, 0x6b, 0xad,\n            0xa4, 0xee, 0x3a, 0x6d, 0xdb, 0x94, 0x4c, 0x8b, 0x82, 0xd3, 0x62, 0xb0, 0x8a, 0xef,\n            0xa8, 0x5d, 0x35, 0xad, 0x92, 0x22, 0x6c, 0xa0, 0xe9, 0xfe, 0x8c, 0x7c, 0x09, 0x4f,\n            0xdd, 0xab, 0x67, 0x1e, 0x1d, 0xae, 0x52, 0x4b, 0xee, 0xf0, 0xcc, 0x92, 0x15, 0x69,\n            0xf1, 0xbf, 0xb4, 0xd6, 0x6c, 0x35, 0x77, 0x30, 0x2e, 0x05, 0xea, 0xa1, 0xa0, 0x80,\n            0x0e, 0x28, 0x68, 0xa2, 0x9b, 0x41, 0x95, 0x2e, 0xe8, 0x81, 0x85, 0x42, 0x5f, 0xdf,\n            0xfc, 0xa3, 0x18, 0xf2, 0x3e, 0x45, 0x14, 0x66, 0x73, 0x9b, 0x95, 0xd0, 0x55, 0x1d,\n            0xcb, 0x03, 0x35, 0xa0, 0xd2, 0xf1, 0xbe, 0xf7, 0x62, 0x41, 0x6b, 0xa3, 0xe1, 0x5b,\n            0xf7, 0xd9, 0xb7, 0xc0, 0xc7, 0x71, 0x7c, 0xf2, 0x28, 0xb1, 0x7c, 0x4d, 0x92, 0xc7,\n            0xb7, 0x80, 0xb2, 0x14, 0xa8, 0x8f, 0x96, 0xdb, 0xa0, 0x83, 0x41, 0x35, 0x80, 0xf1,\n            0x04, 0x69, 0xa9, 0x6c, 0xf6, 0x1d, 0x3b, 0xa2, 0xc2, 0x88, 0xbb, 0xe4, 0xcb, 0xdc,\n            0x44, 0x03, 0xdc, 0x88, 0x99, 0x1c, 0xda, 0x60, 0xa7, 0x84, 0x02, 0xda, 0x05, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x4a, 0x41, 0x8f, 0xd3, 0x5c, 0xfd, 0xf6, 0x80, 0x65, 0x01,\n            0x2d, 0x8a, 0xf2, 0x4f, 0x23, 0xc8, 0x88, 0x36, 0x80, 0xcf, 0x96, 0xd9, 0x74, 0xe5,\n            0xda, 0x19, 0xa0, 0xf1, 0x66, 0xae, 0x10, 0xb1, 0xa0, 0xda, 0xa8, 0xd2, 0xa5, 0x35,\n            0xaa, 0x65, 0x68, 0xbb, 0x05, 0xe8, 0x47, 0x30, 0xa4, 0x08, 0xef, 0x2b, 0x77, 0x5c,\n            0xaa, 0xf0, 0x48, 0xff, 0x71, 0x73, 0x8f, 0x3a, 0x09, 0xa8, 0x4a, 0x45, 0x2d, 0xa0,\n            0x92, 0xee, 0x80, 0x2f, 0x9d, 0xe7, 0x2b, 0x2c, 0x71, 0x41, 0x6b, 0x75, 0x6f, 0x4b,\n            0xa6, 0x56, 0x5f, 0x56, 0x16, 0xe0, 0x06, 0x2b, 0x7d, 0xe5, 0x3d, 0x82, 0xbd, 0x06,\n            0xd8, 0x14, 0xa4, 0xdb, 0xa0, 0xae, 0xd4, 0xe9, 0x7b, 0x76, 0xe1, 0xda, 0x53, 0x21,\n            0xdb, 0x87, 0x85, 0x11, 0x96, 0x86, 0xf0, 0x15, 0x36, 0x70, 0x29, 0x3e, 0x7b, 0xfc,\n            0xcd, 0xfe, 0x11, 0xf5, 0x28, 0x6c, 0x19, 0x3a, 0xff, 0xa0, 0xb1, 0x71, 0x38, 0x3e,\n            0x58, 0x91, 0xef, 0x23, 0xdd, 0xf8, 0x59, 0xc9, 0x1a, 0x5e, 0xbb, 0xd0, 0x10, 0x7b,\n            0x1b, 0xcd, 0xea, 0x71, 0xf0, 0x57, 0x76, 0x4c, 0x88, 0x09, 0x57, 0xca, 0xe1, 0xcb,\n            0xa0, 0xa4, 0xf4, 0x48, 0xba, 0xc0, 0x6a, 0x3f, 0xbd, 0x78, 0xd0, 0xd4, 0xda, 0xd0,\n            0x8b, 0x8f, 0xff, 0xb8, 0x29, 0x9f, 0x00, 0x30, 0x30, 0xf8, 0x48, 0x89, 0x9f, 0x3b,\n            0xe0, 0x84, 0x72, 0x3a, 0x0c, 0xa0, 0x2d, 0xb3, 0x0a, 0x85, 0xa5, 0x6e, 0x1b, 0xef,\n            0xa9, 0xaa, 0x23, 0x31, 0x96, 0x99, 0xd5, 0x6d, 0x27, 0x0c, 0xcb, 0xda, 0x9e, 0x8f,\n            0x46, 0xd0, 0x9d, 0x66, 0x99, 0xa8, 0x1b, 0x8b, 0x29, 0xf7, 0xa0, 0x0d, 0xeb, 0x1d,\n            0xf8, 0x72, 0x35, 0x9d, 0x2d, 0x8d, 0xc6, 0x8f, 0xec, 0x4e, 0x89, 0x18, 0x93, 0xa1,\n            0xbf, 0xe0, 0x4a, 0x91, 0x30, 0x58, 0x3b, 0xcf, 0xb6, 0xa7, 0x7f, 0xe0, 0xc2, 0x1e,\n            0x80, 0xa0, 0x8f, 0x75, 0x72, 0x16, 0xf1, 0x40, 0x06, 0xd6, 0x4d, 0xce, 0x23, 0x76,\n            0x25, 0x1e, 0x2d, 0xdf, 0xc3, 0x13, 0xeb, 0xa6, 0x38, 0xce, 0xd1, 0xde, 0x5f, 0x14,\n            0xe4, 0x93, 0x56, 0x76, 0x84, 0x23, 0xa0, 0xa2, 0x45, 0x15, 0x96, 0x88, 0x51, 0x27,\n            0x44, 0x8f, 0x3d, 0x61, 0x0c, 0x8a, 0x63, 0x22, 0x85, 0x05, 0x70, 0xf2, 0x21, 0x39,\n            0x57, 0x60, 0x57, 0x72, 0x2d, 0xe9, 0x6a, 0x9a, 0xeb, 0x25, 0xa4, 0xa0, 0x63, 0xd2,\n            0xdd, 0x75, 0x2e, 0xa9, 0x4c, 0x03, 0x33, 0x1a, 0x4d, 0x45, 0x97, 0x92, 0xc2, 0x66,\n            0x6d, 0x15, 0x6c, 0x4b, 0x5f, 0x58, 0x38, 0x01, 0xc1, 0x2f, 0x42, 0xc2, 0x40, 0xee,\n            0x79, 0xd0, 0xa0, 0xd6, 0x2f, 0x4d, 0xf8, 0x19, 0x8b, 0x1c, 0x79, 0x6c, 0xaf, 0x1f,\n            0xe5, 0x2c, 0xeb, 0xab, 0x63, 0x67, 0x9d, 0x06, 0x16, 0x8d, 0xa6, 0x26, 0xdb, 0x04,\n            0x7f, 0x76, 0xa1, 0x39, 0xae, 0x8e, 0x21, 0xa0, 0xf7, 0x6b, 0x3b, 0x27, 0xb0, 0xfc,\n            0x61, 0x2e, 0xb0, 0x54, 0x61, 0xa7, 0x14, 0xe9, 0x22, 0xa6, 0x90, 0xcd, 0x56, 0xe0,\n            0x33, 0x6a, 0x0a, 0x83, 0x9b, 0x20, 0x46, 0xb0, 0xad, 0x24, 0xaa, 0xe2, 0xa0, 0x08,\n            0x8e, 0x66, 0xe3, 0xc7, 0xec, 0x61, 0xc2, 0xd4, 0x5d, 0xd3, 0xce, 0xb3, 0x9c, 0x49,\n            0xc6, 0x50, 0x04, 0x74, 0x7a, 0x65, 0x14, 0x2b, 0xb4, 0x8d, 0x3a, 0x93, 0x03, 0x9f,\n            0x6c, 0x70, 0x73, 0xa0, 0xd5, 0x27, 0x3e, 0x84, 0x4f, 0x01, 0xce, 0x69, 0x11, 0x0d,\n            0xe3, 0x17, 0x91, 0x7d, 0x7d, 0xc1, 0x05, 0xf3, 0x45, 0x9e, 0x8b, 0x70, 0xc9, 0xf2,\n            0xad, 0xd4, 0xec, 0xa8, 0xd4, 0x1c, 0xb1, 0xbc, 0xa0, 0xf0, 0x04, 0x6d, 0x08, 0xb8,\n            0x17, 0x8a, 0x5d, 0x74, 0x13, 0xaf, 0x84, 0xc2, 0xc6, 0x3d, 0x9a, 0xa2, 0xdc, 0x11,\n            0xe5, 0x52, 0x3d, 0x9d, 0x0f, 0x0f, 0x8a, 0x56, 0x6b, 0x49, 0x43, 0x10, 0x09, 0x80,\n        ],\n        [\n            0xf9, 0x01, 0xd1, 0x80, 0xa0, 0x4d, 0xa8, 0xf4, 0xc0, 0x7c, 0x24, 0x30, 0x58, 0x83,\n            0x79, 0xc4, 0x8b, 0x2f, 0x15, 0x75, 0x2d, 0x7f, 0x9b, 0x5c, 0x7a, 0x6d, 0x3e, 0xe6,\n            0x8e, 0x47, 0xa1, 0x1e, 0x5e, 0x22, 0x02, 0x7d, 0x7a, 0xa0, 0x55, 0xf6, 0x1f, 0x55,\n            0x0c, 0xf0, 0xf1, 0xc4, 0xa1, 0xb6, 0xa5, 0xee, 0x4a, 0x4f, 0xd0, 0x25, 0x01, 0x1e,\n            0x57, 0x86, 0x46, 0xbb, 0x33, 0xb9, 0x4d, 0x08, 0x73, 0xcf, 0x45, 0xd8, 0xf6, 0x21,\n            0xa0, 0x13, 0x07, 0x4f, 0x8f, 0x9f, 0x38, 0x0f, 0x4f, 0x91, 0xad, 0xfa, 0xea, 0xf6,\n            0xbe, 0x9f, 0xb2, 0x03, 0x7e, 0x0a, 0x96, 0x4c, 0x91, 0x57, 0x88, 0x62, 0xc9, 0xcd,\n            0x51, 0xdb, 0x57, 0xc9, 0x0f, 0xa0, 0x50, 0xa9, 0x73, 0x64, 0x1b, 0x47, 0x11, 0xec,\n            0x3f, 0xd3, 0xad, 0x36, 0x78, 0x98, 0x9a, 0xc9, 0x81, 0xd6, 0x20, 0x69, 0x6d, 0xc3,\n            0x5d, 0xe3, 0x64, 0x7e, 0x40, 0x66, 0xa8, 0x7f, 0xea, 0x1c, 0xa0, 0x87, 0xa2, 0xb9,\n            0x4b, 0xa7, 0x5a, 0x0c, 0xa4, 0x9a, 0x88, 0xbb, 0xb3, 0xa2, 0xcb, 0xca, 0x70, 0xe2,\n            0xb9, 0x8c, 0xa2, 0x97, 0x30, 0x37, 0x0f, 0x57, 0x6d, 0x8a, 0x4b, 0x1e, 0x53, 0x11,\n            0x99, 0xa0, 0xf2, 0x29, 0x88, 0x55, 0x37, 0x5e, 0xb8, 0xee, 0x8e, 0x16, 0xe4, 0x1b,\n            0x37, 0x9b, 0x41, 0xb0, 0x4f, 0x65, 0xfa, 0xd7, 0x31, 0x2c, 0x58, 0xfa, 0xc3, 0x58,\n            0x3e, 0x5e, 0xcb, 0x61, 0x43, 0x36, 0xa0, 0x41, 0xa2, 0xa0, 0x75, 0xec, 0x7c, 0x55,\n            0xce, 0x0e, 0x90, 0xee, 0x76, 0xd0, 0x81, 0xd7, 0x8f, 0x09, 0xf5, 0x40, 0x94, 0x5d,\n            0xd3, 0x50, 0xc3, 0xe4, 0x4b, 0xc8, 0x09, 0xe8, 0xb6, 0x73, 0xf0, 0x80, 0xa0, 0xe3,\n            0x0b, 0xa6, 0x17, 0xc9, 0x84, 0x0f, 0x40, 0x7a, 0x35, 0x1a, 0x6f, 0xbb, 0xe6, 0x59,\n            0xb5, 0xd1, 0x87, 0x86, 0xe5, 0x4e, 0x00, 0x23, 0x2a, 0xeb, 0x98, 0xa7, 0x1d, 0x94,\n            0x3a, 0x2e, 0xc9, 0xa0, 0x31, 0x26, 0xff, 0x24, 0x92, 0x90, 0xdd, 0x63, 0x45, 0x53,\n            0xf8, 0xe2, 0xb8, 0x3d, 0x5a, 0x0a, 0x14, 0x90, 0x2f, 0xe5, 0x21, 0xb0, 0x27, 0x34,\n            0x62, 0x3a, 0xf0, 0xaf, 0x9d, 0x78, 0x83, 0x3d, 0xa0, 0x03, 0xda, 0x4a, 0xd5, 0xd0,\n            0x6a, 0x6b, 0x1b, 0x0d, 0x30, 0x0a, 0x26, 0x27, 0xb3, 0x97, 0x31, 0xbe, 0xb1, 0x20,\n            0xdd, 0x65, 0x79, 0xab, 0x5b, 0x0e, 0x05, 0xbe, 0xc2, 0xb6, 0x79, 0xe0, 0xac, 0xa0,\n            0xb9, 0x5c, 0xa4, 0x83, 0xae, 0xbc, 0x19, 0xd7, 0x27, 0xfb, 0x40, 0x97, 0xf2, 0x30,\n            0x63, 0x3e, 0x6b, 0x5c, 0xc3, 0x3d, 0xfd, 0x1c, 0xce, 0x94, 0x06, 0x92, 0x13, 0x8f,\n            0x90, 0x2a, 0x2e, 0xf0, 0xa0, 0xfd, 0xdb, 0x15, 0xb6, 0xdf, 0x2c, 0xf5, 0xeb, 0xd7,\n            0x5c, 0x8d, 0x95, 0x55, 0x79, 0x64, 0x4b, 0x5b, 0xdf, 0xf8, 0xcc, 0xd5, 0xe9, 0xbb,\n            0xa7, 0x7f, 0xf8, 0x98, 0x42, 0x08, 0xac, 0xda, 0xff, 0xa0, 0x00, 0x45, 0x70, 0x24,\n            0x66, 0xc4, 0xfb, 0xd2, 0x14, 0xad, 0xba, 0x3c, 0x21, 0xae, 0x4d, 0xde, 0x0d, 0x59,\n            0xf0, 0x33, 0xc7, 0x92, 0xe9, 0x4c, 0xf3, 0xc1, 0xe4, 0x9e, 0xf9, 0x51, 0xfb, 0x27,\n            0xa0, 0xbe, 0x91, 0xef, 0xc6, 0x38, 0x96, 0x28, 0xd9, 0x10, 0xb5, 0x8a, 0xf6, 0x74,\n            0x49, 0xd4, 0x27, 0xb4, 0x2b, 0x8c, 0x30, 0x2d, 0x05, 0xfe, 0x10, 0x98, 0x0b, 0x01,\n            0x37, 0xa0, 0xdb, 0xf3, 0xd0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0xf8, 0x51, 0x80, 0xa0, 0xbc, 0x43, 0x11, 0x7f, 0x1b, 0x42, 0x1e, 0x4a, 0xd0, 0x7c,\n            0x91, 0xae, 0x86, 0xf5, 0x1a, 0xca, 0x7d, 0x4d, 0x51, 0x46, 0xa7, 0x37, 0x6d, 0x1f,\n            0xff, 0x58, 0x6b, 0xce, 0x02, 0x21, 0xdc, 0x75, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,\n            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xa0, 0x58, 0xa9, 0x36, 0xbb, 0xb3, 0xa5, 0x48,\n            0x29, 0xbd, 0x37, 0x12, 0x44, 0xa9, 0x42, 0x81, 0x2e, 0x11, 0x30, 0xc2, 0x85, 0x2b,\n            0x25, 0xe9, 0x85, 0xae, 0xe2, 0xb9, 0xfc, 0x50, 0xa7, 0xd3, 0x47, 0x80, 0x80, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n    ];\n    let storage_leaf = [\n        0xec, 0x9e, 0x3f, 0x9a, 0x85, 0x4d, 0xe2, 0x83, 0x3f, 0xd2, 0x17, 0x93, 0x51, 0x14, 0x08,\n        0x77, 0xfd, 0x92, 0x0a, 0x15, 0x98, 0x00, 0xdc, 0x1c, 0x13, 0x9b, 0x4e, 0x8e, 0x4b, 0x59,\n        0x65, 0x7b, 0x8c, 0x8b, 0x02, 0x7b, 0x7c, 0x89, 0x36, 0x14, 0x8e, 0xc1, 0xa0, 0x00, 0x01,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    ];\n    let storage_depth = 6;\n\n    main(\n        signature,\n        message_hash,\n        pub_key_x,\n        pub_key_y,\n        storage_hash,\n        storage_nodes,\n        storage_leaf,\n        storage_depth,\n        storage_value,\n        8453,\n        0,\n        0x0000000000000000000000000000000000000000,\n        balance_slot,\n        verified_balance,\n    );\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/erc20-balance/src/main.nr"},"71":{"source":"use crate::bytes::{byte_to_nibbles, bytes_as_nibbles};\nuse crate::rlp::{\n    decode_rlp_header, decode_rlp_list_fragments, encode_rlp_string, RLP_HEADER_TYPE_LIST,\n    RlpFragment,\n};\nuse dep::std::hash::keccak256;\n\npub fn verify(\n    key: [u8; 32],\n    value: [u8; 32],\n    storage_hash: [u8; 32],\n    nodes: [[u8; 532]; 7],\n    leaf: [u8; 69],\n    depth: u64,\n) {\n    let key = keccak256(key, 32);\n    let nibbles = bytes_as_nibbles(key);\n\n    let mut key_index = 0;\n    let mut curr_hash = storage_hash;\n    for i in 0..7 {\n        if i < depth - 1 {\n            let node = nodes[i];\n\n            // Decode RLP header\n            let rlp_header = decode_rlp_header(node);\n            assert(rlp_header.data_type == RLP_HEADER_TYPE_LIST, \"Invalid data type\");\n\n            // Validate node hash\n            let node_hash: [u8; 32] = get_node_hash(rlp_header, node);\n            assert(node_hash == curr_hash, \"Invalid hash\");\n\n            // Create next hash\n            let rlp_list: BoundedVec<RlpFragment, 17> = decode_rlp_list_fragments(rlp_header, node);\n            if rlp_list.len() == 17 {\n                // Branch Node\n                let curr_nibble = nibbles[key_index] as u32;\n                let rlp_item = rlp_list.get(curr_nibble);\n                assert(rlp_item.length == 32, \"Invalid length\");\n                for i in 0..32 {\n                    curr_hash[i] = node[rlp_item.offset + i];\n                }\n                key_index += 1;\n            } else if rlp_list.len() == 2 {\n                // TODO: Extension Node\n            }\n        }\n    }\n\n    // Verify leaf\n    let rlp_header = decode_rlp_header(leaf);\n    assert(rlp_header.data_type == RLP_HEADER_TYPE_LIST, \"Invalid data type\");\n\n    let resolved_hash = get_node_hash(rlp_header, leaf);\n    assert(resolved_hash == curr_hash, \"Invalid hash\");\n\n    let rlp_list: BoundedVec<RlpFragment, 2> = decode_rlp_list_fragments(rlp_header, leaf);\n    assert(rlp_list.len() == 2, \"Invalid length\");\n\n    let leaf_key_item = rlp_list.get(0);\n    let (parity, _) = byte_to_nibbles(leaf[leaf_key_item.offset]);\n    assert((parity == 2) | (parity == 3), \"Invalid parity\");\n\n    let mut leaf_key_part: [u8; 30] = [0; 30];\n    for i in 0..30 {\n        leaf_key_part[i] = leaf[leaf_key_item.offset + i];\n    }\n    let (leaf_key_prefix, leaf_key) = bytes_as_nibbles(leaf_key_part).as_slice().pop_front();\n    assert((leaf_key_prefix == 2) | (leaf_key_prefix == 3), \"Leaf parity prefix must be 2 or 3\");\n\n    let mut leaf_key_ending: [u8; 59] = [0; 59];\n    for i in 0..59 {\n        if key_index + i < nibbles.len() {\n            leaf_key_ending[i] = nibbles[key_index + i];\n        }\n    }\n    assert(leaf_key.as_array() == leaf_key_ending, \"Key mismatch in the leaf\");\n\n    key_index += leaf_key.len();\n    assert(key_index == nibbles.len(), \"Expected to consume all key nibbles\");\n\n    let leaf_value = rlp_list.get(1);\n    for i in 0..32 {\n        assert(leaf[leaf_value.offset + i] == value[i], \"Value mismatch\");\n    }\n}\n\nunconstrained fn get_node_hash<let NODE_LEN: u32>(\n    rlp_header: RlpFragment,\n    node: [u8; NODE_LEN],\n) -> [u8; 32] {\n    let node_len = rlp_header.length + rlp_header.offset;\n    let resolved_hash: [u8; 32] = keccak256(node, node_len);\n    resolved_hash\n}\n\npub fn get_storage_key<let N: u32>(values: [[u8; 32]; N]) -> [u8; 32] {\n    let mut input_slice = values[0].as_slice();\n    for i in 1..N {\n        input_slice = input_slice.append(values[i]);\n    }\n    let input: [u8; N * 32] = input_slice.as_array();\n    let key = keccak256(input, input.len());\n    key\n}\n\npub fn get_storage_value(field: Field) -> [u8; 32] {\n    let value_bytes: [u8; 32] = field.to_be_bytes();\n    let value_rlp = encode_rlp_string(value_bytes);\n    value_rlp\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/proof/mod.nr"},"72":{"source":"mod secp256k1;\n\npub fn ecrecover(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // clip v value\n    hashed_message: [u8; 32],\n) -> Field {\n    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n\n    assert(key.verify_sig(signature, hashed_message));\n    let addr = key.to_eth_address();\n\n    addr\n}\n\n#[test]\nfn test_ecrecover() {\n    let pub_key_x = [\n        131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223,\n        198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117,\n    ];\n    let pub_key_y = [\n        53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99,\n        12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165,\n    ];\n    let signature = [\n        57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82,\n        71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213,\n        80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23,\n        136, 75, 29, 177,\n    ];\n    let hashed_message = [\n        13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112,\n        68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102,\n    ];\n\n    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/ecrecover/mod.nr"},"73":{"source":"use dep::std;\n\nuse dep::array_helpers;\n\nstruct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nfn split_uncompressed_pub_key(pub_key: [u8; 65]) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    }\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey { pub_x, pub_y }\n    }\n\n    fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64(pub_key);\n\n        PubKey { pub_x: key_x, pub_y: key_y }\n    }\n\n    fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey { pub_x: key_x, pub_y: key_y }\n    }\n\n    fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64(self.pub_x, self.pub_y);\n        let hashed_pub_key = std::hash::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(self, signature: [u8; 64], hashed_message: [u8; 32]) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [\n        131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223,\n        198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117,\n    ];\n    let pub_key_y = [\n        53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99,\n        12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165,\n    ];\n    let signature = [\n        57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82,\n        71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213,\n        80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23,\n        136, 75, 29, 177,\n    ];\n    let hashed_message = [\n        13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112,\n        68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102,\n    ];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/ecrecover/secp256k1.nr"},"74":{"source":"pub fn bytes_as_nibbles<let N: u32>(bytes: [u8; N]) -> [u8; N * 2] {\n    let mut nibbles = [0; N * 2];\n    for i in 0..N {\n        let nibs = byte_to_nibbles(bytes[i]);\n        nibbles[i * 2] = nibs.0;\n        nibbles[i * 2 + 1] = nibs.1;\n    }\n    nibbles\n}\n\npub fn byte_to_nibbles(b: u8) -> (u8, u8) {\n    let upper = b >> 4;\n    let lower = b - 16 * upper;\n\n    (upper, lower)\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/bytes/mod.nr"},"75":{"source":"use dep::std::wrapping_sub;\n\npub global RLP_HEADER_TYPE_STRING = 0;\npub global RLP_HEADER_TYPE_LIST = 1;\n\npub struct RlpFragment {\n    pub offset: u32,\n    pub length: u32,\n    pub data_type: u32,\n}\n\npub unconstrained fn decode_rlp_list_fragments<let NODE_LEN: u32, let MAX_FIELDS: u32>(\n    rlp_header: RlpFragment,\n    node: [u8; NODE_LEN],\n) -> BoundedVec<RlpFragment, MAX_FIELDS> {\n    let mut rlp_list = BoundedVec::new();\n    let mut curr_offset = rlp_header.offset;\n    for _ in 0..MAX_FIELDS {\n        if (curr_offset < node.len()) {\n            let field_prefix = node[curr_offset];\n\n            let field_offset = if field_prefix < 0x80 { 0 } else { 1 };\n            let field_length = if field_prefix < 0x80 {\n                1\n            } else {\n                wrapping_sub(field_prefix as u32, 0x80)\n            };\n\n            rlp_list.push(\n                RlpFragment {\n                    offset: curr_offset + field_offset,\n                    length: field_length,\n                    data_type: RLP_HEADER_TYPE_STRING,\n                },\n            );\n\n            curr_offset += field_length + field_offset;\n        }\n    }\n\n    rlp_list\n}\n\npub unconstrained fn decode_rlp_header<let NODE_LEN: u32>(node: [u8; NODE_LEN]) -> RlpFragment {\n    let (prefix, data) = node.as_slice().pop_front();\n\n    if (prefix < 0x80) {\n        // 1 byte\n        RlpFragment { offset: 0 as u32, length: 1 as u32, data_type: RLP_HEADER_TYPE_STRING }\n    } else if (prefix < 0xb8) {\n        // 0-55 byte string\n        RlpFragment {\n            offset: 1,\n            length: wrapping_sub(prefix, 0x80) as u32,\n            data_type: RLP_HEADER_TYPE_STRING,\n        }\n    } else if (prefix < 0xc0) {\n        // > 55 byte string\n        RlpFragment {\n            offset: wrapping_sub(1 + prefix, 0xb7) as u32,\n            length: extract_payload_len(data, wrapping_sub(prefix, 0xb7) as u32),\n            data_type: RLP_HEADER_TYPE_STRING,\n        }\n    } else if (prefix < 0xf8) {\n        // 0-55 byte array\n        RlpFragment {\n            offset: 1,\n            length: wrapping_sub(prefix, 0xc0) as u32,\n            data_type: RLP_HEADER_TYPE_LIST,\n        }\n    } else {\n        // > 55 byte array\n        RlpFragment {\n            offset: wrapping_sub(1 + prefix, 0xf7) as u32,\n            length: extract_payload_len(data, wrapping_sub(prefix, 0xf7) as u32),\n            data_type: RLP_HEADER_TYPE_LIST,\n        }\n    }\n}\n\nfn extract_payload_len(data: [u8], len: u32) -> u32 {\n    let data_len = data.len();\n    let mut node_len = 0;\n    for i in 0..2 {\n        if (i < len & i < data_len) {\n            node_len = data[i] as u32 + node_len * 256;\n        }\n    }\n\n    node_len\n}\n\npub fn encode_rlp_string<let N: u32>(data: [u8; N]) -> [u8; N] {\n    let length = data.len();\n    let mut result = [0; N];\n\n    // Find first non-zero byte using for loop\n    let mut start_idx = 0;\n    for i in 0..N {\n        if (start_idx == 0) & (data[i] != 0) {\n            start_idx = i;\n        }\n    }\n\n    // If all zeros, return single zero byte\n    if (start_idx == 0) & (data[0] == 0) {\n        result[0] = 0x80;\n        result\n    }\n\n    let actual_length = length - start_idx;\n\n    if (actual_length == 1) & (data[start_idx] < 0x80) {\n        // Single byte < 0x80\n        result[0] = data[start_idx];\n    } else {\n        // 0-55 bytes string\n        result[0] = (0x80 + actual_length) as u8;\n        for i in 0..N {\n            if i < actual_length {\n                result[i + 1] = data[start_idx + i];\n            }\n        }\n    }\n\n    result\n}\n","path":"/Users/kartik/projects/anoncast/packages/zk/circuits/lib/src/rlp/mod.nr"}},"names":["main"],"brillig_names":["decode_rlp_header","get_node_hash","decode_rlp_list_fragments","decode_rlp_header","get_node_hash","decode_rlp_list_fragments","field_less_than","decompose_hint","lte_hint","directive_invert","directive_integer_quotient"]}