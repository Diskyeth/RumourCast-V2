{"noir_version":"0.38.0+e784523a15c0c233a5a794f28498635b7ce86325","hash":17658647724600552672,"abi":{"parameters":[{"name":"signature","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"message_hash","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_key_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"pub_key_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"state_root","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"account_nodes","type":{"kind":"array","length":10,"type":{"kind":"array","length":532,"type":{"kind":"integer","sign":"unsigned","width":8}}},"visibility":"private"},{"name":"account_leaf","type":{"kind":"array","length":112,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"account_depth","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"account_value","type":{"kind":"field"},"visibility":"private"},{"name":"chain_id","type":{"kind":"field"},"visibility":"private"},{"name":"block_number","type":{"kind":"field"},"visibility":"private"},{"name":"verified_balance","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"field"},{"kind":"field"},{"kind":"field"},{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"error_types":{}},"bytecode":"","debug_symbols":"","file_map":{"6":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"7":{"source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"25":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(unsafe { field_less_than(b, a) });\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"26":{"source":"pub mod bn254;\nuse crate::runtime::is_unconstrained;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"27":{"source":"use crate::runtime::is_unconstrained;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[foreign(keccakf1600)]\nfn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n\n#[no_predicates]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n\nmod tests {\n    use super::keccak256;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19,\n            0x37, 0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca,\n            0x4b, 0x3b, 0x1a, 0xbf,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn hash_hello_world() {\n        let input = \"Hello world!\".as_bytes();\n        let result = [\n            0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n            0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n            0xea, 0xab,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn var_size_hash() {\n        let input = [\n            189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\n            206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,\n            223,\n        ];\n        let result = [\n            226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170,\n            219, 171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n        ];\n        assert_eq(keccak256(input, 13), result);\n    }\n\n    #[test]\n    fn hash_longer_than_136_bytes() {\n        let input = \"123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789 123456789\"\n            .as_bytes();\n        assert(input.len() > 136);\n\n        let result = [\n            0x1d, 0xca, 0xeb, 0xdf, 0xd9, 0xd6, 0x24, 0x67, 0x1c, 0x18, 0x16, 0xda, 0xd, 0x8a, 0xeb,\n            0xa8, 0x75, 0x71, 0x2c, 0xc, 0x89, 0xe0, 0x25, 0x2, 0xe8, 0xb6, 0x5e, 0x16, 0x5, 0x55,\n            0xe4, 0x40,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n}\n","path":"std/hash/keccak.nr"},"28":{"source":"pub mod poseidon;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\nuse crate::uint128::U128;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"36":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod schnorr;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod eddsa;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod ec;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod bigint;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(x: Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(x: T) -> Field {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(\n        crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y),\n    )\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\n","path":"std/lib.nr"},"69":{"source":"use dep::lib::{ecrecover, proof, rlp};\n\nfn main(\n    // Address Data\n    signature: [u8; 64],\n    message_hash: [u8; 32],\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    // State Proof\n    state_root: [u8; 32],\n    account_nodes: [[u8; 532]; 10],\n    account_leaf: [u8; 112],\n    account_depth: u32,\n    account_value: Field,\n    // Verification Data\n    chain_id: Field,\n    block_number: Field,\n    // Balance Data\n    verified_balance: Field,\n) -> pub (Field, Field, Field, [u8; 32]) {\n    let address: [u8; 32] =\n        ecrecover::ecrecover(pub_key_x, pub_key_y, signature, message_hash).to_be_bytes();\n\n    let mut address_slice: [u8; 20] = [0; 20];\n    for i in 0..20 {\n        address_slice[i] = address[i + 12];\n    }\n\n    let key = proof::get_key_hash(address_slice, 20);\n\n    let leaf_value =\n        proof::extract_value(key, state_root, account_nodes, account_leaf, account_depth);\n\n    let leaf_value_list: BoundedVec<rlp::RlpFragment, 2> =\n        rlp::decode_rlp_list_fragments(leaf_value, account_leaf);\n\n    let leaf_value_item = leaf_value_list.get(1);\n    let account_data: BoundedVec<rlp::RlpFragment, 4> =\n        rlp::decode_rlp_list_fragments(leaf_value_item, account_leaf);\n\n    let account_data_item = account_data.get(2);\n    let account_value_bytes: [u8; 32] = account_value.to_be_bytes();\n\n    let start_idx = get_start_idx(account_value_bytes);\n    for i in 0..32 {\n        if i >= start_idx {\n            assert(\n                account_leaf[i + account_data_item.offset - start_idx] == account_value_bytes[i],\n                \"Value mismatch\",\n            );\n        }\n    }\n\n    assert(!account_value.lt(verified_balance), \"Attempt to verify too high balance\");\n\n    (verified_balance, chain_id, block_number, state_root)\n}\n\nunconstrained fn get_start_idx(array: [u8; 32]) -> u32 {\n    let mut start_idx = 0;\n    for i in 0..32 {\n        if array[i] != 0 {\n            start_idx = i;\n            break;\n        }\n    }\n    start_idx\n}\n\n#[test]\nfn test_main() {\n    let signature = [\n        0x07, 0x81, 0x3c, 0x43, 0xe6, 0x88, 0xa5, 0xc6, 0x0f, 0xb7, 0x2c, 0x25, 0xeb, 0x0a, 0xd3,\n        0x7a, 0xc2, 0x33, 0x0d, 0xb5, 0x09, 0x1d, 0xc7, 0x68, 0x42, 0x45, 0x93, 0xe1, 0xd1, 0xfa,\n        0x94, 0x4c, 0x44, 0xbc, 0x32, 0xd0, 0x3b, 0x32, 0xe5, 0xae, 0x83, 0xea, 0xca, 0x36, 0x9c,\n        0x86, 0x55, 0xa0, 0x66, 0x41, 0xfa, 0x64, 0x3c, 0x57, 0x66, 0x67, 0x0d, 0x77, 0xc0, 0x1b,\n        0x40, 0x75, 0xdd, 0xde,\n    ];\n    let message_hash = [\n        0x4a, 0x5c, 0x5d, 0x45, 0x47, 0x21, 0xbb, 0xbb, 0x25, 0x54, 0x0c, 0x33, 0x17, 0x52, 0x1e,\n        0x71, 0xc3, 0x73, 0xae, 0x36, 0x45, 0x8f, 0x96, 0x0d, 0x2a, 0xd4, 0x6e, 0xf0, 0x88, 0x11,\n        0x0e, 0x95,\n    ];\n    let pub_key_x = [\n        0xc4, 0xf3, 0x9d, 0x22, 0x1e, 0x8f, 0xb2, 0x2f, 0xde, 0x8c, 0x3e, 0x00, 0x37, 0xf5, 0xa4,\n        0x8b, 0xb5, 0x5f, 0x90, 0x9c, 0xfa, 0x42, 0x35, 0xdb, 0xc6, 0x59, 0x3a, 0x02, 0x33, 0x3b,\n        0x24, 0x72,\n    ];\n    let pub_key_y = [\n        0xb5, 0xbe, 0x32, 0xd0, 0x58, 0x1d, 0x67, 0x02, 0x5a, 0x29, 0x8c, 0x5d, 0xf5, 0xaa, 0x9d,\n        0x32, 0x2f, 0x6a, 0x3c, 0x38, 0x1e, 0x68, 0xb2, 0x5d, 0x5e, 0xe1, 0xc7, 0xc2, 0xb6, 0xa9,\n        0x5f, 0x94,\n    ];\n    let verified_balance = 0xb3d3530b472eb501;\n    let account_value = 0xb3d3530b472eb502;\n    let state_root = [\n        0xe8, 0xed, 0x54, 0xae, 0x93, 0x92, 0xb7, 0x5f, 0x7a, 0x8b, 0x9e, 0x15, 0x78, 0x9c, 0xf8,\n        0x00, 0xf7, 0x2c, 0x93, 0x0e, 0x22, 0x88, 0x25, 0x00, 0xe6, 0x17, 0x7a, 0xb6, 0x9c, 0x54,\n        0x6f, 0x0b,\n    ];\n    let account_nodes = [\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0xcc, 0x16, 0xf4, 0xf7, 0x79, 0x2c, 0x40, 0xe6, 0xb4, 0x70,\n            0x38, 0x0e, 0x46, 0x24, 0xbb, 0xe8, 0xf8, 0x67, 0x4e, 0x88, 0x3d, 0xbe, 0x5d, 0x7a,\n            0x1f, 0xc7, 0x88, 0x4f, 0xa2, 0x38, 0x9b, 0x54, 0xa0, 0x94, 0xc4, 0xb3, 0xc4, 0x1e,\n            0xed, 0x08, 0x8a, 0x96, 0x31, 0x71, 0xef, 0x1f, 0x9e, 0x9d, 0x24, 0x7f, 0xb3, 0xa4,\n            0x6e, 0x15, 0x5c, 0x56, 0x4e, 0xbe, 0x5f, 0x74, 0x05, 0xd0, 0x75, 0x4e, 0xa3, 0xa0,\n            0x31, 0x42, 0x0c, 0x71, 0x4c, 0xe6, 0x73, 0x0e, 0xf8, 0x85, 0x25, 0x1b, 0xd7, 0x91,\n            0x23, 0x5c, 0xe3, 0x8c, 0x4d, 0xc4, 0x92, 0x6e, 0x22, 0x66, 0x16, 0xa6, 0x93, 0x0e,\n            0xf2, 0x9f, 0x85, 0xff, 0xa0, 0x04, 0xa7, 0x46, 0xe5, 0x4c, 0xf9, 0x15, 0xdb, 0xa2,\n            0xf5, 0x28, 0xd0, 0xce, 0x7a, 0x21, 0x8c, 0x4c, 0xbc, 0xb8, 0xa6, 0xa7, 0xb9, 0xc7,\n            0xbe, 0x49, 0xa5, 0xf2, 0x7d, 0x0c, 0x64, 0x2b, 0x29, 0xa0, 0x42, 0x98, 0x6e, 0x6d,\n            0xc1, 0xb5, 0x9d, 0xb4, 0xf7, 0x7e, 0xca, 0x7a, 0xb4, 0xa1, 0x4f, 0xe0, 0x10, 0xa1,\n            0xab, 0x85, 0x26, 0xe0, 0xc6, 0x2a, 0xc1, 0x78, 0xe9, 0x69, 0xdf, 0x8b, 0xf0, 0xa6,\n            0xa0, 0x10, 0x78, 0x5e, 0xd1, 0x04, 0xa7, 0x5a, 0xf4, 0x89, 0xef, 0x58, 0x03, 0x12,\n            0x5e, 0x73, 0x53, 0x67, 0xcd, 0x16, 0xf1, 0x08, 0x01, 0xff, 0x50, 0xa4, 0x50, 0xb5,\n            0x97, 0x19, 0xa7, 0x2c, 0x16, 0xa0, 0x18, 0x98, 0x32, 0xbc, 0xc5, 0xd2, 0x67, 0x5f,\n            0x4d, 0xf4, 0x86, 0xb4, 0x60, 0x24, 0xfe, 0x12, 0xd1, 0x6d, 0x6d, 0xd5, 0x31, 0x84,\n            0x8e, 0xa6, 0x0d, 0xe5, 0xd0, 0x43, 0x2a, 0xb3, 0x07, 0x06, 0xa0, 0x79, 0xc2, 0x39,\n            0x11, 0x73, 0xb8, 0x8a, 0x99, 0x2b, 0x31, 0x8d, 0x06, 0xea, 0x9d, 0xb8, 0xaa, 0x60,\n            0xb1, 0xcf, 0xc1, 0xfd, 0x7a, 0xa8, 0xb7, 0x9d, 0x05, 0x5e, 0x06, 0xf0, 0x21, 0xba,\n            0x9f, 0xa0, 0x8b, 0x59, 0x3b, 0x01, 0x24, 0xbc, 0x97, 0x53, 0x5b, 0x10, 0xe5, 0x59,\n            0x4a, 0x84, 0x3c, 0xbb, 0x83, 0xea, 0x69, 0x6b, 0x27, 0xb9, 0xfe, 0xb2, 0xb5, 0xab,\n            0x96, 0x9d, 0x54, 0x57, 0x85, 0xac, 0xa0, 0x4b, 0xec, 0x2d, 0x11, 0x78, 0xe7, 0x51,\n            0x97, 0x4a, 0xa1, 0xc1, 0xaa, 0xc1, 0x86, 0xd9, 0x8d, 0x21, 0x8d, 0x0f, 0x78, 0x73,\n            0xf5, 0x19, 0xe2, 0x1e, 0xb1, 0xb7, 0x69, 0x10, 0x33, 0x59, 0x30, 0xa0, 0x2d, 0xcc,\n            0x9f, 0xc9, 0xef, 0x95, 0xcb, 0x56, 0x78, 0x22, 0xfd, 0xae, 0x03, 0xc8, 0x02, 0x55,\n            0xdd, 0x92, 0xa7, 0x05, 0xff, 0x1d, 0x55, 0xba, 0x25, 0x38, 0x49, 0x65, 0x54, 0x47,\n            0x7e, 0xbe, 0xa0, 0xfc, 0xb3, 0x0e, 0x76, 0x2e, 0xc7, 0x2d, 0x69, 0x68, 0x11, 0x16,\n            0x29, 0x72, 0x06, 0x5f, 0x15, 0x21, 0xf6, 0x57, 0x37, 0x61, 0xf6, 0x3a, 0xdd, 0x91,\n            0x10, 0x8c, 0xdd, 0x86, 0x53, 0x1e, 0xcc, 0xa0, 0x4e, 0xa1, 0x65, 0xff, 0x75, 0xa3,\n            0xdd, 0xd1, 0x9d, 0x14, 0xd8, 0x52, 0x76, 0x52, 0x24, 0x76, 0xef, 0x92, 0xe0, 0x13,\n            0x15, 0x42, 0x84, 0x32, 0xcc, 0x68, 0xba, 0xb3, 0x20, 0xcc, 0x23, 0xd7, 0xa0, 0x16,\n            0x76, 0x8c, 0xbf, 0x8a, 0x23, 0xab, 0xf1, 0x0c, 0x9e, 0xe7, 0x12, 0xc6, 0xfc, 0xd0,\n            0x60, 0x2e, 0xf7, 0xc1, 0xcd, 0xe9, 0xf3, 0x4f, 0x77, 0xdf, 0xe1, 0xd8, 0x76, 0x9a,\n            0xd7, 0xc2, 0xf4, 0xa0, 0xd3, 0xe9, 0x58, 0x25, 0x45, 0xe2, 0x29, 0x75, 0x52, 0x84,\n            0xc5, 0xbb, 0xa0, 0x3b, 0x48, 0x88, 0xdb, 0x50, 0x78, 0xb3, 0x27, 0x7c, 0x64, 0xd6,\n            0x80, 0x51, 0x59, 0x21, 0x50, 0x7e, 0x40, 0x63, 0xa0, 0xe3, 0x98, 0x09, 0xb7, 0xb7,\n            0xd2, 0xd8, 0xf7, 0xec, 0xd0, 0x06, 0xcb, 0x1e, 0xdc, 0x86, 0x5f, 0x34, 0xae, 0x67,\n            0xa4, 0x95, 0x70, 0xb6, 0xf9, 0xb7, 0x48, 0x01, 0xc9, 0x05, 0x47, 0x84, 0x09, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0xe6, 0x9d, 0x25, 0x46, 0xf9, 0x9f, 0x12, 0x3e, 0xdb, 0xf0,\n            0xc4, 0x1a, 0xb9, 0xcb, 0x54, 0xb6, 0x93, 0xf6, 0x83, 0x93, 0x9d, 0x5f, 0x4d, 0xdd,\n            0x7c, 0x5e, 0x22, 0x62, 0x7b, 0xb7, 0x90, 0xdd, 0xa0, 0x5c, 0xa5, 0x92, 0xcf, 0x4f,\n            0xa4, 0xe0, 0x07, 0x2d, 0xc3, 0xa2, 0x7f, 0x68, 0xd7, 0x40, 0xa2, 0xfc, 0xbb, 0xa8,\n            0x52, 0x3c, 0xd3, 0xd7, 0x10, 0x28, 0xe2, 0x25, 0x38, 0x23, 0x4f, 0xa7, 0x7c, 0xa0,\n            0x4f, 0xfa, 0x13, 0x31, 0xa7, 0xb5, 0x86, 0xf6, 0xb7, 0x2f, 0x19, 0x7a, 0x93, 0xc3,\n            0xcb, 0x53, 0xf2, 0x56, 0x72, 0xf1, 0xc5, 0x46, 0x57, 0x36, 0x8b, 0x85, 0x54, 0x31,\n            0x78, 0xf6, 0xb9, 0xf3, 0xa0, 0xe6, 0xb1, 0x84, 0x8e, 0xd9, 0xa1, 0x04, 0xa1, 0xd4,\n            0x66, 0xf4, 0xe7, 0x49, 0xa0, 0xad, 0x97, 0xad, 0x16, 0x3d, 0xc2, 0x2e, 0x5a, 0xda,\n            0x4a, 0xc4, 0x5c, 0x67, 0xb3, 0xc3, 0xfd, 0x61, 0xae, 0xa0, 0xcc, 0xec, 0x15, 0xca,\n            0xab, 0x01, 0x1c, 0x60, 0x9f, 0x86, 0x24, 0x70, 0x65, 0x59, 0x9c, 0x68, 0x8a, 0x65,\n            0xe2, 0xe7, 0xad, 0x93, 0x05, 0x14, 0xe0, 0x17, 0x94, 0x2a, 0x79, 0xc2, 0xfa, 0x7d,\n            0xa0, 0x00, 0x62, 0x27, 0xea, 0xb5, 0x0f, 0x57, 0x0c, 0x46, 0x2d, 0xc1, 0x85, 0xb6,\n            0x69, 0x68, 0x73, 0x1a, 0x21, 0xb7, 0xac, 0x6f, 0xbd, 0xd1, 0x24, 0xb7, 0xfb, 0x64,\n            0x2a, 0xe8, 0xd3, 0xce, 0x95, 0xa0, 0x4b, 0xaf, 0x87, 0x9e, 0xc3, 0x19, 0xb5, 0xb4,\n            0x18, 0xa8, 0xf3, 0x5b, 0x88, 0x6b, 0x8d, 0xb3, 0x42, 0x0c, 0x89, 0x78, 0x64, 0x90,\n            0x21, 0x9c, 0xf6, 0x2e, 0x2e, 0x18, 0x30, 0x1c, 0x56, 0xbe, 0xa0, 0x44, 0x7f, 0x21,\n            0xed, 0x88, 0x8c, 0x6d, 0x0c, 0xda, 0xb2, 0x1a, 0x49, 0x64, 0x22, 0xd8, 0x23, 0x3d,\n            0x22, 0x18, 0x40, 0xb4, 0x3c, 0xc6, 0x66, 0xcc, 0xbf, 0xed, 0x1a, 0x05, 0x0d, 0xf5,\n            0x06, 0xa0, 0xc3, 0x75, 0x9d, 0xb1, 0xbd, 0x63, 0xd4, 0xb1, 0xcc, 0x32, 0xe1, 0x52,\n            0xec, 0xd6, 0xe6, 0x6d, 0x70, 0xf9, 0x84, 0x4e, 0x56, 0x09, 0x26, 0x27, 0x58, 0x33,\n            0x56, 0x52, 0x44, 0x49, 0xc5, 0x57, 0xa0, 0xe5, 0x36, 0x95, 0xb2, 0xc7, 0x2c, 0x9b,\n            0x04, 0xb8, 0x6a, 0x52, 0x91, 0xe9, 0x2c, 0x47, 0x95, 0x54, 0x78, 0xf1, 0x16, 0x3d,\n            0xfb, 0x36, 0xb3, 0x12, 0x92, 0x94, 0xc3, 0x5c, 0xe7, 0xd7, 0xb3, 0xa0, 0x23, 0x92,\n            0x01, 0x1a, 0x0b, 0x6a, 0xba, 0x4c, 0xaa, 0x72, 0x73, 0xc4, 0x7f, 0x40, 0x2a, 0x59,\n            0x8f, 0xd6, 0x11, 0x58, 0x79, 0x83, 0x5b, 0xd2, 0xa9, 0xbd, 0x3b, 0xa6, 0x0e, 0x3e,\n            0x7e, 0x37, 0xa0, 0x6c, 0x97, 0x7f, 0xfe, 0x49, 0x25, 0x90, 0xed, 0xcc, 0xe6, 0x9e,\n            0xa9, 0xaf, 0xc5, 0x07, 0x32, 0x08, 0x2e, 0x90, 0x7f, 0x6a, 0xf4, 0x5a, 0x7f, 0x8a,\n            0x82, 0x87, 0xcf, 0x9e, 0x8d, 0x6f, 0xd8, 0xa0, 0x4f, 0x3a, 0x80, 0x8c, 0xa2, 0x26,\n            0xb5, 0x6d, 0xa7, 0xa4, 0xcf, 0xc9, 0x2a, 0xe3, 0xa4, 0xd8, 0x5e, 0x49, 0x34, 0x0a,\n            0xfa, 0x40, 0x31, 0x49, 0xdc, 0xeb, 0x1f, 0xda, 0x25, 0xd8, 0x73, 0x4b, 0xa0, 0xf5,\n            0x36, 0x34, 0xa4, 0x40, 0x25, 0x2f, 0x73, 0x78, 0x39, 0x73, 0x1a, 0x73, 0xa6, 0xde,\n            0x62, 0x5e, 0x87, 0xa9, 0xd6, 0x6c, 0x54, 0xcb, 0xdf, 0x7e, 0xd1, 0xc0, 0x4c, 0x2b,\n            0x26, 0x92, 0xe2, 0xa0, 0x05, 0xda, 0x92, 0x31, 0xcf, 0xf7, 0xef, 0xab, 0xb4, 0x6c,\n            0x2f, 0x3c, 0xb9, 0xd2, 0x55, 0xd8, 0x2e, 0x55, 0x3b, 0x5b, 0x7f, 0xb5, 0xf7, 0xb5,\n            0x2d, 0x63, 0xc8, 0x44, 0xe7, 0x6b, 0xf9, 0xda, 0xa0, 0xe7, 0x9e, 0x4b, 0x4f, 0xb5,\n            0x5f, 0x6a, 0x65, 0xbe, 0x18, 0x04, 0x43, 0xf8, 0x18, 0x14, 0x14, 0x5a, 0x4b, 0xff,\n            0x39, 0xc2, 0xac, 0x88, 0x90, 0x28, 0x15, 0x00, 0xc5, 0xd8, 0x01, 0xf5, 0xdb, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0xc7, 0xe2, 0x70, 0xe0, 0x5f, 0xc7, 0xb1, 0x72, 0x44, 0xcf,\n            0x85, 0x0b, 0x75, 0xad, 0x4e, 0x0f, 0x02, 0x0c, 0x1d, 0xdb, 0xd1, 0x02, 0xe3, 0x72,\n            0x4d, 0x51, 0xfb, 0xe2, 0xc3, 0x51, 0x5a, 0x4a, 0xa0, 0x97, 0x9c, 0xed, 0xea, 0xb7,\n            0x06, 0x7e, 0x56, 0x77, 0xb6, 0x3f, 0x95, 0x26, 0x09, 0x82, 0x25, 0x9d, 0x2f, 0xc9,\n            0x19, 0x97, 0xdb, 0x83, 0x4f, 0x38, 0xeb, 0xfb, 0xbd, 0x74, 0xdf, 0x14, 0x4d, 0xa0,\n            0x00, 0x97, 0x16, 0x04, 0xb7, 0x25, 0x51, 0x36, 0xc0, 0x97, 0x55, 0xde, 0x21, 0x5c,\n            0x22, 0x17, 0x6a, 0xef, 0xea, 0x1e, 0x0d, 0x92, 0x3c, 0x44, 0xe4, 0x65, 0x3d, 0xee,\n            0xba, 0x51, 0x13, 0xa0, 0xa0, 0xf9, 0x48, 0x84, 0xc5, 0x61, 0xe9, 0xfc, 0x92, 0x69,\n            0xc0, 0x13, 0xb3, 0xbf, 0xe7, 0x7d, 0xc4, 0xad, 0xff, 0xfd, 0x5f, 0x9c, 0xd5, 0x6c,\n            0x0c, 0x45, 0x5d, 0xab, 0x86, 0xd4, 0x85, 0x1e, 0xde, 0xa0, 0x46, 0x9d, 0xb7, 0xe7,\n            0xec, 0x6c, 0x4a, 0x13, 0xc8, 0x66, 0x50, 0x55, 0xa1, 0x28, 0x0c, 0xd6, 0x34, 0xb1,\n            0x62, 0x4c, 0x67, 0xd9, 0xcf, 0x4c, 0xe3, 0xa3, 0x2e, 0xc2, 0x76, 0xb5, 0x1f, 0x35,\n            0xa0, 0xf0, 0xc4, 0x13, 0x36, 0x64, 0x1e, 0x6f, 0xb9, 0xe9, 0x3d, 0x7c, 0x26, 0x1d,\n            0x5e, 0xe6, 0x6c, 0x30, 0xb0, 0xe8, 0x79, 0x73, 0x73, 0xea, 0xc6, 0x3d, 0xa8, 0x57,\n            0x9c, 0xb2, 0x94, 0xb2, 0xf8, 0xa0, 0x70, 0xa2, 0x2c, 0x13, 0xa6, 0xfb, 0x32, 0xa1,\n            0x79, 0x4d, 0xe0, 0xfe, 0x18, 0x99, 0xa2, 0x54, 0xae, 0x20, 0xa8, 0xe3, 0xf1, 0xe1,\n            0x79, 0xcf, 0x25, 0xb5, 0xce, 0x9c, 0xb6, 0x04, 0x80, 0x67, 0xa0, 0x8f, 0x78, 0x44,\n            0x8a, 0xff, 0xb3, 0x8b, 0x13, 0x3c, 0xf6, 0xfc, 0x99, 0x4f, 0xf0, 0xcf, 0xcd, 0x04,\n            0x00, 0xa1, 0x7a, 0x6a, 0x06, 0x77, 0x20, 0xc8, 0x3b, 0x70, 0x68, 0x1f, 0x67, 0xa2,\n            0x72, 0xa0, 0x51, 0x8e, 0x9b, 0x31, 0xe3, 0x02, 0x1c, 0xc1, 0x23, 0xfd, 0x7a, 0x91,\n            0xe1, 0xcd, 0x25, 0x31, 0x48, 0x3e, 0xf4, 0xca, 0x10, 0x50, 0x81, 0x80, 0xd3, 0xbb,\n            0xe3, 0xed, 0x33, 0xbc, 0x44, 0x9b, 0xa0, 0x31, 0x55, 0x3f, 0x88, 0x70, 0xa6, 0xd2,\n            0x48, 0x69, 0x97, 0x52, 0x90, 0xf5, 0x75, 0xb4, 0xad, 0x39, 0x39, 0x53, 0xb8, 0x6c,\n            0x9c, 0x80, 0x04, 0x1d, 0x0e, 0xd0, 0x31, 0xb1, 0x4b, 0xfc, 0x6d, 0xa0, 0xa2, 0x0c,\n            0x00, 0x33, 0x9a, 0xc1, 0x9b, 0xb2, 0x1f, 0x27, 0x80, 0xff, 0x0b, 0xc3, 0x1e, 0x7c,\n            0xe8, 0xdc, 0x89, 0xb7, 0xe4, 0x8c, 0x52, 0x01, 0x8e, 0x33, 0xbe, 0xf8, 0x35, 0x86,\n            0xbe, 0x6c, 0xa0, 0x4b, 0x32, 0xe6, 0x4f, 0x1c, 0x42, 0x03, 0x21, 0xab, 0xef, 0x6a,\n            0x80, 0x7a, 0x6c, 0xed, 0x01, 0x42, 0xf8, 0xcd, 0x73, 0x5c, 0x3a, 0xf4, 0x5a, 0x62,\n            0x9f, 0xe3, 0xd9, 0xe9, 0x00, 0x01, 0xe0, 0xa0, 0x42, 0xc8, 0x37, 0x4c, 0x61, 0xa3,\n            0x5d, 0xad, 0x8f, 0x53, 0xf3, 0xaa, 0x21, 0x40, 0x2c, 0x1d, 0x01, 0x51, 0x8a, 0x28,\n            0xc9, 0x45, 0xb1, 0x4b, 0x78, 0x4a, 0xbf, 0xce, 0x41, 0xc6, 0xc0, 0x15, 0xa0, 0xc2,\n            0x97, 0x2d, 0x92, 0x1d, 0x79, 0xd3, 0x65, 0x5d, 0xd7, 0xb4, 0x42, 0xb7, 0xd5, 0x8d,\n            0x80, 0xdf, 0xb4, 0x5d, 0xb4, 0x06, 0x7d, 0xa9, 0x78, 0xbf, 0xea, 0xf3, 0x9e, 0x7d,\n            0x2f, 0xd9, 0x92, 0xa0, 0x0e, 0x4f, 0xb0, 0x3d, 0x26, 0x64, 0xaa, 0xf2, 0x06, 0x84,\n            0x13, 0xbf, 0x02, 0x70, 0xd2, 0x41, 0xcb, 0x5a, 0x40, 0x40, 0x05, 0xf4, 0x1a, 0x3d,\n            0x34, 0x1e, 0x4a, 0x80, 0x5d, 0x36, 0xd2, 0x61, 0xa0, 0xde, 0x3d, 0x8d, 0xd0, 0x1d,\n            0xbe, 0x31, 0x40, 0x61, 0x1e, 0x6f, 0x9d, 0x6e, 0xed, 0x8a, 0xe8, 0x76, 0xc8, 0x77,\n            0x4b, 0x90, 0x91, 0xaf, 0xdc, 0xec, 0xdb, 0x39, 0x3b, 0x0a, 0xf4, 0x1b, 0x58, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x4e, 0x7b, 0x2c, 0x48, 0x71, 0xfd, 0xa5, 0xf0, 0xfd, 0x1b,\n            0xe3, 0x51, 0xd0, 0x06, 0x6c, 0x4b, 0x3b, 0xf6, 0x29, 0xdb, 0x0a, 0x54, 0x26, 0x35,\n            0x26, 0x97, 0x36, 0x9b, 0xf7, 0x0a, 0x07, 0xd9, 0xa0, 0x34, 0x72, 0x40, 0xa2, 0x18,\n            0x61, 0x22, 0x97, 0x57, 0xda, 0x11, 0x90, 0xa2, 0xeb, 0x17, 0x90, 0xaa, 0xbd, 0x4a,\n            0x3d, 0x69, 0xd8, 0x21, 0x17, 0xee, 0x97, 0x2e, 0x5b, 0xdd, 0xb3, 0x21, 0x92, 0xa0,\n            0x56, 0x36, 0xf7, 0xbd, 0x55, 0x1f, 0x8a, 0x99, 0x81, 0x5b, 0xca, 0x31, 0xec, 0xf4,\n            0xdd, 0xb7, 0x1c, 0x1d, 0xd5, 0x84, 0xc3, 0x9b, 0xca, 0xad, 0xb0, 0x4c, 0x97, 0xfc,\n            0xbe, 0x20, 0x1a, 0x3a, 0xa0, 0x4d, 0xe4, 0x67, 0xef, 0x0b, 0x7c, 0xdc, 0x45, 0xc1,\n            0x94, 0x33, 0x1a, 0xd1, 0x13, 0x52, 0x39, 0x06, 0xcb, 0xda, 0xe6, 0xa2, 0x1a, 0x62,\n            0x58, 0x57, 0xb7, 0xbe, 0x45, 0x74, 0x2e, 0xf1, 0x73, 0xa0, 0xd8, 0xee, 0x3f, 0xac,\n            0xbe, 0x7f, 0x38, 0xf0, 0x66, 0xf5, 0xc6, 0x06, 0x3e, 0x8d, 0xe4, 0x20, 0x49, 0x28,\n            0x90, 0xe0, 0x18, 0x56, 0xa8, 0x65, 0xc1, 0xbb, 0x61, 0xf4, 0xfa, 0x05, 0x65, 0x6c,\n            0xa0, 0x6e, 0x2f, 0xac, 0x02, 0x42, 0xd9, 0x5d, 0x0b, 0xea, 0xc3, 0xcb, 0x48, 0xfd,\n            0xd2, 0x6f, 0x82, 0xc9, 0x75, 0x1c, 0x44, 0x8c, 0x03, 0x1b, 0x9e, 0xda, 0x80, 0x71,\n            0x90, 0x0b, 0xb5, 0x72, 0x1d, 0xa0, 0xe6, 0xf4, 0xc1, 0x1b, 0x51, 0x2b, 0x59, 0x2f,\n            0xf3, 0x2c, 0x05, 0x2a, 0x4b, 0xbd, 0x16, 0x58, 0x32, 0x4c, 0x3b, 0x40, 0x0e, 0xe0,\n            0xef, 0xaa, 0xd1, 0xe9, 0x24, 0xe2, 0x0e, 0xb5, 0xab, 0x19, 0xa0, 0x2c, 0x2d, 0xe8,\n            0x83, 0xcf, 0x23, 0x76, 0xb7, 0x24, 0xd4, 0x5a, 0xc0, 0x67, 0xc5, 0xd2, 0xae, 0x24,\n            0xf8, 0xda, 0xf2, 0xb5, 0xf5, 0x98, 0x5a, 0x70, 0xdf, 0xdd, 0x35, 0x0b, 0x83, 0xe8,\n            0x26, 0xa0, 0x7b, 0xcf, 0xd1, 0xd8, 0xb9, 0xd4, 0xc2, 0x5a, 0xdc, 0x73, 0x99, 0x74,\n            0x6b, 0x0c, 0xba, 0x9f, 0xdc, 0x9a, 0x1a, 0x63, 0xeb, 0xe1, 0x53, 0xde, 0x70, 0x33,\n            0xfc, 0x24, 0x75, 0x98, 0x60, 0x7b, 0xa0, 0x93, 0x28, 0xce, 0xdc, 0xfa, 0xd5, 0x46,\n            0x7c, 0xf3, 0xf4, 0xfc, 0xd6, 0x61, 0xd1, 0xe9, 0x36, 0x19, 0x2e, 0x72, 0x80, 0xef,\n            0xd1, 0xb5, 0xe5, 0xa9, 0x1b, 0xa0, 0xee, 0xcf, 0x30, 0x21, 0x2b, 0xa0, 0x01, 0x6a,\n            0x04, 0x04, 0x6f, 0xa8, 0x97, 0x6e, 0xf1, 0xec, 0x83, 0xf1, 0x52, 0x36, 0xb5, 0x9c,\n            0x1a, 0x19, 0x3d, 0x0a, 0xf4, 0xdf, 0xaf, 0x49, 0x96, 0x86, 0x16, 0x1c, 0x12, 0x67,\n            0x70, 0x36, 0xa0, 0x65, 0x12, 0x72, 0x93, 0xa5, 0x4a, 0x9c, 0x34, 0xca, 0x02, 0x72,\n            0xa7, 0x5e, 0x43, 0xab, 0x14, 0xa4, 0xaa, 0xbd, 0xe5, 0x10, 0x20, 0x06, 0xa0, 0x36,\n            0x21, 0x96, 0xf3, 0x9a, 0x07, 0x62, 0x6b, 0xa0, 0x86, 0x0a, 0x8c, 0x52, 0xd4, 0x28,\n            0x9f, 0x54, 0x57, 0x07, 0x51, 0x56, 0x4a, 0x86, 0xfd, 0x46, 0xfc, 0xed, 0x91, 0xfc,\n            0x55, 0x1c, 0x79, 0x54, 0x1c, 0xf8, 0x5b, 0xbc, 0xa8, 0x9b, 0x7d, 0x52, 0xa0, 0xf2,\n            0x6d, 0x00, 0xe7, 0x37, 0x0f, 0xbe, 0x6d, 0x08, 0x68, 0x0d, 0xb8, 0x05, 0xbf, 0x44,\n            0xcb, 0xf2, 0x1f, 0x56, 0xe4, 0x39, 0xca, 0x6a, 0x1b, 0x19, 0x94, 0x64, 0xcd, 0xee,\n            0x3f, 0x26, 0x9d, 0xa0, 0x4c, 0x79, 0x74, 0x2a, 0xa2, 0xe1, 0x24, 0x7a, 0x6e, 0xe5,\n            0x92, 0x26, 0xe6, 0x43, 0x2f, 0x25, 0x72, 0xbd, 0x07, 0x12, 0xdc, 0x5d, 0xc2, 0xe0,\n            0x0b, 0x04, 0x97, 0xc8, 0xa3, 0x01, 0x3f, 0xf5, 0xa0, 0xa6, 0x29, 0xf7, 0x00, 0x54,\n            0x50, 0x21, 0xb2, 0x8c, 0xf9, 0xb3, 0xcd, 0xd5, 0x61, 0x8e, 0xa4, 0xd3, 0x10, 0x81,\n            0x30, 0x43, 0x45, 0x2b, 0x0f, 0x11, 0xb1, 0x98, 0x1c, 0x98, 0xb6, 0x35, 0xa2, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0xb0, 0x08, 0x25, 0xe9, 0x0e, 0x3b, 0xd6, 0x3c, 0xe8, 0x4d,\n            0xe3, 0xee, 0x3e, 0x9f, 0x9d, 0x55, 0x51, 0x48, 0x57, 0x7e, 0xde, 0x94, 0xec, 0xce,\n            0x88, 0xcc, 0x36, 0x1f, 0x0c, 0x71, 0x2f, 0x7c, 0xa0, 0xb1, 0xf0, 0xb5, 0x9d, 0xcf,\n            0xc7, 0x52, 0x38, 0x92, 0xc7, 0x08, 0xa8, 0x9e, 0xba, 0x6a, 0x2d, 0x7c, 0xf7, 0x3a,\n            0xf0, 0x90, 0x39, 0xe8, 0x0f, 0xb2, 0xcc, 0x87, 0xc6, 0x0b, 0x82, 0x5c, 0x52, 0xa0,\n            0x99, 0x89, 0x15, 0x7c, 0xb5, 0x4b, 0x0a, 0x4b, 0xbb, 0x06, 0x96, 0xa2, 0x08, 0x0e,\n            0x64, 0xb8, 0x92, 0x78, 0xc2, 0x23, 0x1d, 0xce, 0xf9, 0xc9, 0xea, 0x76, 0xb4, 0x4b,\n            0x08, 0x51, 0x8e, 0xbe, 0xa0, 0x5c, 0xc2, 0xed, 0x32, 0x6f, 0x88, 0xfd, 0x9a, 0x2e,\n            0x84, 0x39, 0x59, 0x5e, 0x4a, 0x28, 0x2d, 0x5b, 0xfe, 0x5d, 0xd9, 0xd7, 0xba, 0x28,\n            0x35, 0x52, 0xb6, 0xea, 0x77, 0xff, 0x84, 0xb5, 0xd7, 0xa0, 0x57, 0xd3, 0x01, 0xa3,\n            0x0e, 0x11, 0x70, 0x7c, 0xd9, 0xf7, 0x0b, 0xc7, 0x6a, 0x7c, 0xe1, 0xe4, 0x57, 0x15,\n            0x56, 0x11, 0x29, 0x99, 0x40, 0x4a, 0x32, 0x80, 0x74, 0x1f, 0x8b, 0xf0, 0x80, 0x24,\n            0xa0, 0x85, 0xf8, 0x9b, 0x4d, 0x5e, 0x9a, 0x95, 0x8e, 0x00, 0x5c, 0x54, 0x6e, 0x63,\n            0x5a, 0xab, 0x79, 0x99, 0x84, 0x49, 0xa1, 0xd2, 0x58, 0xe1, 0x83, 0xa9, 0xf4, 0x78,\n            0x91, 0xb6, 0x3e, 0x44, 0x6f, 0xa0, 0x01, 0x33, 0x33, 0xed, 0x45, 0xc1, 0x63, 0x3c,\n            0x8d, 0x20, 0x5d, 0x58, 0x92, 0x94, 0x5d, 0x0d, 0x5e, 0x19, 0x41, 0xe7, 0x96, 0xcf,\n            0x49, 0xbd, 0x19, 0x27, 0x2b, 0xbf, 0xb4, 0xe3, 0xe4, 0xfc, 0xa0, 0x3f, 0xda, 0x55,\n            0x91, 0x82, 0x8f, 0x92, 0x51, 0xa9, 0x84, 0xa3, 0x06, 0x59, 0xfe, 0x97, 0x87, 0x7d,\n            0x3c, 0x1b, 0x52, 0x25, 0x8a, 0x54, 0xc0, 0x4b, 0xd1, 0xa8, 0x1b, 0x9b, 0xe9, 0x18,\n            0x0b, 0xa0, 0x55, 0x0f, 0xb4, 0xb7, 0x06, 0xdf, 0x7a, 0xe8, 0x38, 0x6b, 0x07, 0x63,\n            0x5e, 0x34, 0xeb, 0xf8, 0x51, 0x4d, 0x2a, 0x96, 0x7f, 0x78, 0x19, 0x0a, 0x4f, 0x07,\n            0x2a, 0xad, 0x90, 0xcc, 0x1b, 0x08, 0xa0, 0x3b, 0xd1, 0xd7, 0x8b, 0xb9, 0xb2, 0x7b,\n            0x93, 0xbd, 0x57, 0xc4, 0x18, 0x6f, 0xb5, 0x64, 0x95, 0xdb, 0x5b, 0x9c, 0x2b, 0x30,\n            0xb0, 0x8a, 0x10, 0xc9, 0x49, 0xf4, 0x88, 0xf8, 0x22, 0x8a, 0xf8, 0xa0, 0xfb, 0x57,\n            0x4b, 0x63, 0x3c, 0x82, 0x97, 0x9e, 0x55, 0x58, 0x5b, 0xc6, 0x4c, 0x51, 0x40, 0x51,\n            0xf8, 0x62, 0x95, 0x58, 0xe8, 0x27, 0x83, 0xc8, 0x56, 0x36, 0x16, 0x22, 0x6e, 0xa6,\n            0x5b, 0x31, 0xa0, 0x54, 0x37, 0x63, 0xdc, 0xf1, 0x21, 0x4c, 0x80, 0xb9, 0x32, 0xec,\n            0x96, 0x92, 0x8d, 0xb2, 0x23, 0x8c, 0xd4, 0x5b, 0x99, 0xd1, 0x29, 0x4d, 0x4f, 0xa4,\n            0x38, 0x2d, 0x01, 0x1b, 0xfd, 0x37, 0x0f, 0xa0, 0xf9, 0xb9, 0x07, 0x15, 0x02, 0xb9,\n            0xee, 0x14, 0xee, 0x60, 0x71, 0xe0, 0xa0, 0xb7, 0x65, 0xfb, 0xda, 0x83, 0xd6, 0x87,\n            0x80, 0x7b, 0x43, 0x11, 0x9d, 0x07, 0x20, 0x16, 0x50, 0xc3, 0x0d, 0xed, 0xa0, 0x59,\n            0xd0, 0x95, 0x97, 0x57, 0x04, 0xcb, 0x21, 0x07, 0xaf, 0xe4, 0x03, 0xf6, 0x30, 0x52,\n            0xcf, 0x36, 0xb3, 0xcc, 0xd3, 0x6c, 0x96, 0xf0, 0xda, 0x6f, 0x10, 0xf8, 0x51, 0x58,\n            0x73, 0xe9, 0xa5, 0xa0, 0xe8, 0xc8, 0x7b, 0x06, 0x16, 0x6e, 0xef, 0x58, 0xde, 0x3d,\n            0xf6, 0xf9, 0x62, 0x3c, 0x65, 0xcb, 0x79, 0xc6, 0x33, 0x6e, 0x75, 0xa4, 0x17, 0x7e,\n            0x11, 0x17, 0x86, 0x60, 0x72, 0xb1, 0x8c, 0xf2, 0xa0, 0xba, 0x8f, 0x09, 0xd9, 0x9d,\n            0xfc, 0xeb, 0x32, 0xdf, 0x00, 0x23, 0x4e, 0x86, 0xb7, 0x0e, 0x29, 0x2a, 0x71, 0x63,\n            0x77, 0xa4, 0x60, 0xf2, 0x9f, 0x80, 0x27, 0x50, 0x82, 0x99, 0x7f, 0xee, 0x2b, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x99, 0x13, 0x88, 0x10, 0x12, 0x77, 0xac, 0xe7, 0x0e, 0x5b,\n            0x41, 0x5a, 0x9d, 0x67, 0x0b, 0xc0, 0xf6, 0x7f, 0xb7, 0x12, 0x2c, 0xc6, 0xd5, 0x86,\n            0x71, 0x0b, 0x14, 0x80, 0x57, 0xd0, 0xc2, 0x30, 0xa0, 0x24, 0x92, 0x6e, 0xb8, 0x00,\n            0x3c, 0xea, 0xbd, 0xf5, 0x35, 0xe4, 0xd9, 0x51, 0xc3, 0x5d, 0x34, 0x40, 0x07, 0x38,\n            0x86, 0x7d, 0x28, 0xb0, 0xad, 0x1e, 0x48, 0x36, 0x0a, 0x2d, 0x06, 0x93, 0xdf, 0xa0,\n            0xec, 0xca, 0xb0, 0xd8, 0xec, 0x1e, 0xdc, 0x7a, 0x73, 0x7c, 0x31, 0x4e, 0xae, 0xa7,\n            0x93, 0x56, 0xaf, 0xbe, 0x70, 0x17, 0xa4, 0x6b, 0xb3, 0x9a, 0x85, 0x66, 0x2a, 0x04,\n            0x29, 0x75, 0x9e, 0xd4, 0xa0, 0xa6, 0xcb, 0x4d, 0x7c, 0xa4, 0x41, 0x39, 0x1f, 0xff,\n            0x94, 0x93, 0xbe, 0x73, 0xfc, 0xd5, 0xed, 0xcf, 0x72, 0x05, 0x35, 0x1f, 0xbe, 0x0e,\n            0xa6, 0x3d, 0xd5, 0x01, 0x14, 0xeb, 0xa6, 0x51, 0x51, 0xa0, 0x6a, 0x29, 0x65, 0xe5,\n            0x90, 0x68, 0x29, 0xc0, 0x4f, 0x4d, 0x90, 0xca, 0xd7, 0x8d, 0xfc, 0x93, 0xc5, 0x97,\n            0x3f, 0xf0, 0x16, 0x51, 0xfa, 0x6a, 0x76, 0xb7, 0x67, 0xdf, 0x25, 0x9a, 0xc2, 0xae,\n            0xa0, 0x7a, 0x9c, 0x1a, 0x8d, 0x03, 0xe9, 0xce, 0x3b, 0x3d, 0x73, 0x79, 0x5c, 0x87,\n            0x58, 0x31, 0xe9, 0xe0, 0x4a, 0x4b, 0x73, 0x78, 0xdf, 0xe1, 0xa5, 0x08, 0x1b, 0xc3,\n            0x33, 0x6e, 0x7d, 0x0d, 0x00, 0xa0, 0xc1, 0x5d, 0x01, 0x33, 0x57, 0x6f, 0xaa, 0xa8,\n            0x46, 0x1a, 0xc9, 0x91, 0x47, 0xd5, 0x35, 0xa6, 0x3d, 0x98, 0xec, 0xa0, 0xae, 0x43,\n            0xcc, 0xd3, 0xf1, 0xea, 0xa2, 0x01, 0x05, 0xa1, 0x11, 0xd6, 0xa0, 0xa1, 0x38, 0x4e,\n            0xa5, 0x8d, 0x68, 0x8f, 0x42, 0x52, 0xac, 0xdf, 0x41, 0x20, 0x8b, 0x96, 0x3b, 0xf2,\n            0xec, 0xc2, 0x88, 0x96, 0x09, 0xd0, 0xcc, 0x17, 0x33, 0x7f, 0x20, 0x20, 0xaa, 0x93,\n            0x10, 0xa0, 0x06, 0x00, 0x87, 0x94, 0xa3, 0x5a, 0xf7, 0xda, 0x6c, 0x7a, 0xfb, 0xe0,\n            0x0e, 0x51, 0xc9, 0xda, 0x12, 0xfb, 0x3b, 0x85, 0x87, 0xf0, 0xeb, 0xd5, 0x00, 0x25,\n            0xa0, 0xcf, 0x09, 0xe5, 0x79, 0x42, 0xa0, 0xcf, 0xa2, 0x5f, 0x18, 0xe2, 0x68, 0x92,\n            0xb6, 0xe4, 0x67, 0x29, 0xe9, 0xe0, 0x74, 0xf6, 0xfc, 0x6f, 0xc4, 0x31, 0xbc, 0x57,\n            0x6e, 0x30, 0xb5, 0xc1, 0x4f, 0xcc, 0x45, 0x85, 0x58, 0x78, 0x3f, 0xa0, 0xe9, 0x0b,\n            0xd4, 0x21, 0x49, 0x28, 0x38, 0x2b, 0x4d, 0xcc, 0x24, 0xe3, 0xc5, 0x1b, 0x2f, 0xef,\n            0x45, 0xd6, 0x45, 0x23, 0x3a, 0x52, 0xe4, 0xcd, 0x76, 0x31, 0xd3, 0x09, 0x67, 0x48,\n            0xca, 0x76, 0xa0, 0xd2, 0xb1, 0xd6, 0x3f, 0x2f, 0x79, 0x81, 0x96, 0x5d, 0x9a, 0x9a,\n            0x30, 0x24, 0x02, 0xe2, 0x2e, 0x6d, 0x25, 0xf5, 0x3f, 0x46, 0x74, 0x10, 0x50, 0x14,\n            0x1f, 0x57, 0x02, 0xa3, 0xf4, 0x03, 0xaf, 0xa0, 0x33, 0x72, 0x67, 0x3d, 0xde, 0x6c,\n            0xc1, 0x85, 0x8f, 0x0f, 0x34, 0x98, 0x54, 0xa2, 0xfc, 0x7a, 0x16, 0x19, 0x71, 0x64,\n            0x13, 0x24, 0x6c, 0xa6, 0xb1, 0x00, 0x45, 0xe0, 0x25, 0x76, 0x54, 0x53, 0xa0, 0x8e,\n            0xe2, 0x5b, 0x08, 0x7e, 0xb2, 0xf1, 0xfe, 0x5c, 0x59, 0x78, 0xab, 0x0f, 0x79, 0xff,\n            0x6e, 0x62, 0xe4, 0x6a, 0x90, 0x27, 0x0a, 0x56, 0x14, 0x69, 0x09, 0xae, 0xef, 0x9a,\n            0xff, 0x79, 0x92, 0xa0, 0x96, 0x25, 0x94, 0x7d, 0x85, 0x00, 0x5b, 0xa0, 0x83, 0x88,\n            0xc3, 0xeb, 0xf5, 0x56, 0x9e, 0x52, 0x52, 0x1a, 0xb2, 0x42, 0x78, 0x82, 0x9a, 0x0e,\n            0xa7, 0xa1, 0x03, 0x4e, 0xc6, 0x23, 0x65, 0xc0, 0xa0, 0x4f, 0x44, 0x82, 0x4c, 0xcb,\n            0x7d, 0x57, 0xaa, 0x77, 0xfe, 0x77, 0xeb, 0xce, 0x9f, 0x76, 0xb3, 0xb5, 0xc4, 0x76,\n            0xf9, 0xe0, 0x50, 0xc0, 0x2d, 0x57, 0xbd, 0x06, 0xfc, 0x1e, 0x7b, 0x36, 0x44, 0x80,\n        ],\n        [\n            0xf9, 0x01, 0x91, 0xa0, 0x67, 0xd7, 0x46, 0x69, 0x43, 0x09, 0x5a, 0x59, 0xdc, 0xd3,\n            0xaa, 0x18, 0x71, 0x4c, 0x9a, 0x9c, 0x77, 0x9b, 0xea, 0x08, 0xd4, 0xd9, 0x81, 0xf4,\n            0x91, 0x36, 0x11, 0xe5, 0xf8, 0x54, 0x26, 0xf6, 0xa0, 0xb5, 0x4a, 0xc3, 0xa9, 0xb9,\n            0x4f, 0x45, 0xa5, 0xb7, 0x05, 0x54, 0x5f, 0x63, 0x84, 0x89, 0x1a, 0x2c, 0x72, 0xe7,\n            0x03, 0x44, 0x9f, 0x07, 0x1a, 0xeb, 0x85, 0x78, 0x48, 0xcf, 0xd8, 0x3d, 0xc6, 0xa0,\n            0xb9, 0x04, 0xbf, 0xcc, 0xf5, 0x09, 0x99, 0xbe, 0x97, 0xaa, 0x78, 0x63, 0xa5, 0x91,\n            0x43, 0x2b, 0x2d, 0x51, 0x81, 0xca, 0xef, 0xc7, 0x2b, 0x9d, 0x2e, 0xf9, 0x79, 0x24,\n            0x61, 0xaf, 0x89, 0x59, 0xa0, 0x34, 0x7d, 0x0b, 0x26, 0xa4, 0xda, 0x52, 0xf7, 0xa1,\n            0xf9, 0xc7, 0xbd, 0x17, 0xaa, 0x65, 0x59, 0x9f, 0x34, 0x31, 0x14, 0xba, 0xaf, 0xab,\n            0xbe, 0xc3, 0x6d, 0xd0, 0x29, 0xe5, 0x34, 0x4b, 0x38, 0xa0, 0x16, 0x35, 0x09, 0xb5,\n            0x02, 0x8f, 0xf0, 0x0f, 0x32, 0xec, 0x19, 0x12, 0x5a, 0xb1, 0xde, 0x15, 0xa5, 0xf1,\n            0xc3, 0x5e, 0x61, 0x39, 0x0e, 0x96, 0xb9, 0x6b, 0x19, 0xdc, 0xc5, 0x30, 0xe0, 0x18,\n            0xa0, 0x6d, 0x31, 0x52, 0xa4, 0x06, 0xc9, 0x37, 0xf9, 0x73, 0x5e, 0xba, 0x66, 0x63,\n            0xd9, 0xfa, 0xff, 0xe1, 0xa1, 0xdc, 0xd4, 0xfa, 0x8b, 0x57, 0x22, 0x13, 0x0b, 0x46,\n            0x7f, 0x1a, 0x99, 0xbd, 0xc3, 0x80, 0x80, 0xa0, 0xbb, 0x52, 0x0e, 0x72, 0xe3, 0x14,\n            0xf4, 0xc5, 0xa6, 0x41, 0x3d, 0x0a, 0x69, 0x12, 0xea, 0xe1, 0xa8, 0x6a, 0x5e, 0x0c,\n            0x83, 0xd4, 0xe5, 0x8a, 0xf4, 0xb9, 0xa9, 0xe5, 0xc3, 0xee, 0xd1, 0xfc, 0xa0, 0x51,\n            0xab, 0xa9, 0x29, 0x81, 0x4b, 0x13, 0xfb, 0x2d, 0x5c, 0x7e, 0x46, 0x25, 0xba, 0x68,\n            0x26, 0x68, 0x37, 0x4f, 0x1d, 0x56, 0x73, 0x73, 0x81, 0x6b, 0xea, 0xf6, 0xb1, 0xf9,\n            0xd3, 0xcd, 0x59, 0xa0, 0xb8, 0xb9, 0x8e, 0x34, 0xb4, 0x37, 0x53, 0x3f, 0x8e, 0x74,\n            0x8c, 0xc2, 0x27, 0x77, 0x8c, 0xcc, 0xc1, 0x4c, 0xce, 0x02, 0x20, 0x8f, 0x4f, 0xd2,\n            0xe7, 0x16, 0x64, 0x86, 0xfc, 0x96, 0x88, 0xfb, 0x80, 0xa0, 0x28, 0x4e, 0xee, 0x14,\n            0xed, 0x70, 0x28, 0x9d, 0xbb, 0x4e, 0x32, 0x04, 0x4b, 0x62, 0x99, 0xde, 0x04, 0x48,\n            0xeb, 0x2b, 0x69, 0x16, 0x0f, 0x36, 0x09, 0x46, 0x56, 0x4f, 0x14, 0x6f, 0x83, 0xce,\n            0xa0, 0xfd, 0xc6, 0x16, 0x71, 0xef, 0x62, 0x03, 0xcd, 0x2a, 0x36, 0xf7, 0x29, 0x6c,\n            0xeb, 0xda, 0x91, 0x83, 0x68, 0x04, 0x02, 0x0a, 0x98, 0x52, 0xb4, 0x0d, 0xbb, 0xa9,\n            0xb2, 0xcb, 0xec, 0xfc, 0xfd, 0x80, 0xa0, 0x14, 0xae, 0xd7, 0x3d, 0xe8, 0x74, 0xbc,\n            0x86, 0xc1, 0x63, 0x94, 0x88, 0xe4, 0x34, 0x4a, 0xea, 0x97, 0xa1, 0x50, 0xf5, 0xa4,\n            0x8f, 0x08, 0x88, 0xc2, 0xe9, 0xc4, 0xec, 0x88, 0x92, 0xce, 0x3c, 0x80, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0xf8, 0x51, 0x80, 0x80, 0x80, 0x80, 0xa0, 0x82, 0xe0, 0xa8, 0x83, 0x74, 0x5e, 0xf3,\n            0xb1, 0x82, 0xec, 0x00, 0xdc, 0xbe, 0xba, 0xbd, 0xfb, 0x61, 0x76, 0x64, 0x84, 0x1c,\n            0xe6, 0xe2, 0x6e, 0xb9, 0xd4, 0x68, 0x8b, 0x44, 0xfa, 0x9f, 0x57, 0x80, 0x80, 0x80,\n            0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xa0, 0x25, 0xbc, 0xfe, 0xbf, 0xc2, 0xad,\n            0x68, 0x26, 0x15, 0x2f, 0xf0, 0x76, 0xbd, 0x57, 0x23, 0xf4, 0x0c, 0x91, 0x63, 0xb9,\n            0x01, 0xa0, 0x41, 0xdb, 0x34, 0xe5, 0x56, 0xd6, 0x1c, 0xab, 0x90, 0x32, 0x80, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n    ];\n    let account_leaf = [\n        0xf8, 0x6e, 0x9d, 0x20, 0xce, 0x7f, 0xf0, 0xf4, 0x49, 0x6a, 0xe9, 0xde, 0xec, 0xcf, 0x08,\n        0x32, 0x45, 0xbe, 0x44, 0xf6, 0x3a, 0xaa, 0xb1, 0x6f, 0x52, 0xdf, 0xfb, 0x24, 0x41, 0xd3,\n        0x20, 0x5a, 0xb8, 0x4e, 0xf8, 0x4c, 0x2b, 0x88, 0xb3, 0xd3, 0x53, 0x0b, 0x47, 0x2e, 0xb5,\n        0x02, 0xa0, 0x56, 0xe8, 0x1f, 0x17, 0x1b, 0xcc, 0x55, 0xa6, 0xff, 0x83, 0x45, 0xe6, 0x92,\n        0xc0, 0xf8, 0x6e, 0x5b, 0x48, 0xe0, 0x1b, 0x99, 0x6c, 0xad, 0xc0, 0x01, 0x62, 0x2f, 0xb5,\n        0xe3, 0x63, 0xb4, 0x21, 0xa0, 0xc5, 0xd2, 0x46, 0x01, 0x86, 0xf7, 0x23, 0x3c, 0x92, 0x7e,\n        0x7d, 0xb2, 0xdc, 0xc7, 0x03, 0xc0, 0xe5, 0x00, 0xb6, 0x53, 0xca, 0x82, 0x27, 0x3b, 0x7b,\n        0xfa, 0xd8, 0x04, 0x5d, 0x85, 0xa4, 0x70,\n    ];\n    let account_depth = 9;\n\n    main(\n        signature,\n        message_hash,\n        pub_key_x,\n        pub_key_y,\n        state_root,\n        account_nodes,\n        account_leaf,\n        account_depth,\n        account_value,\n        8453,\n        0,\n        verified_balance,\n    );\n}\n","path":"/Users/kartik/projects/anonworld/anonworld/packages/credentials/src/verifiers/native-balance/circuit/src/main.nr"},"71":{"source":"use crate::bytes::{byte_to_nibbles, bytes_as_nibbles};\nuse crate::rlp::{\n    decode_rlp_header, decode_rlp_list_fragments, encode_rlp_string, RLP_DATA_TYPE_LIST,\n    RlpFragment,\n};\nuse dep::std::hash::keccak256;\n\npub fn verify<let NODES_LEN: u32, let LEAF_LEN: u32>(\n    key: [u8; 32],\n    value: [u8; 32],\n    storage_hash: [u8; 32],\n    nodes: [[u8; 532]; NODES_LEN],\n    leaf: [u8; LEAF_LEN],\n    depth: u32,\n) {\n    let leaf_value = extract_value(key, storage_hash, nodes, leaf, depth);\n    for i in 0..32 {\n        assert(leaf[leaf_value.offset + i] == value[i], \"Value mismatch\");\n    }\n}\n\npub fn extract_value<let NODES_LEN: u32, let LEAF_LEN: u32>(\n    key: [u8; 32],\n    storage_hash: [u8; 32],\n    nodes: [[u8; 532]; NODES_LEN],\n    leaf: [u8; LEAF_LEN],\n    depth: u32,\n) -> RlpFragment {\n    let nibbles = bytes_as_nibbles(key);\n    let mut key_index = 0;\n    let mut curr_hash = storage_hash;\n    for i in 0..NODES_LEN {\n        if i < depth - 1 {\n            let node = nodes[i];\n\n            // Decode RLP header\n            let rlp_header = decode_rlp_header(node);\n            assert(rlp_header.data_type == RLP_DATA_TYPE_LIST, \"Invalid data type\");\n\n            // Validate node hash\n            let node_hash: [u8; 32] = get_node_hash(rlp_header, node);\n            assert(node_hash == curr_hash, \"Invalid hash\");\n\n            // Create next hash\n            let rlp_list: BoundedVec<RlpFragment, 17> = decode_rlp_list_fragments(rlp_header, node);\n            let index = if rlp_list.len() == 17 {\n                nibbles[key_index] as u32\n            } else {\n                1\n            };\n            let rlp_item = rlp_list.get(index);\n            assert(rlp_item.length == 32, \"Invalid length\");\n            curr_hash = copy(node, rlp_item.offset);\n            key_index += 1;\n        }\n    }\n\n    // Verify leaf\n    let rlp_header = decode_rlp_header(leaf);\n    assert(rlp_header.data_type == RLP_DATA_TYPE_LIST, \"Invalid data type\");\n\n    let resolved_hash = get_node_hash(rlp_header, leaf);\n    assert(resolved_hash == curr_hash, \"Invalid hash\");\n\n    let rlp_list: BoundedVec<RlpFragment, 2> = decode_rlp_list_fragments(rlp_header, leaf);\n    assert(rlp_list.len() == 2, \"Invalid length\");\n\n    let leaf_key_item = rlp_list.get(0);\n    let leaf_key = get_leaf_key(leaf, leaf_key_item);\n\n    for i in 0..59 {\n        if (i < leaf_key.len()) & (key_index + i < nibbles.len()) {\n            assert(leaf_key[i] == nibbles[key_index + i], \"Key mismatch in the leaf\");\n        }\n    }\n\n    key_index += leaf_key.len();\n    assert(key_index >= nibbles.len(), \"Expected to consume all key nibbles\");\n\n    rlp_list.get(1)\n}\n\nfn get_leaf_key<let LEAF_LEN: u32>(leaf: [u8; LEAF_LEN], rlp_fragment: RlpFragment) -> [u8] {\n    let (prefix, _) = byte_to_nibbles(leaf[rlp_fragment.offset]);\n    assert((prefix == 2) | (prefix == 3), \"Leaf parity prefix must be 2 or 3\");\n\n    let prefixed_key_bytes: [u8; 32] = copy(leaf, rlp_fragment.offset);\n    let prefixed_key_nibbles: [u8] = bytes_as_nibbles(prefixed_key_bytes).as_slice();\n    let (prefix, key_nibbles) = prefixed_key_nibbles.pop_front();\n    if (prefix % 2 == 0) {\n        let (parity_prefix, key_nibbles) = key_nibbles.pop_front();\n        assert(parity_prefix == 0, \"Parity prefix must be 0\");\n        key_nibbles\n    } else {\n        key_nibbles\n    }\n}\n\nunconstrained fn copy<let N: u32, let M: u32>(arr: [u8; N], offset: u32) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    for i in 0..M {\n        result[i] = arr[offset + i];\n    }\n    result\n}\n\npub unconstrained fn get_key_hash<let N: u32>(key: [u8; N], message_size: u32) -> [u8; 32] {\n    let key_hash = keccak256(key, message_size);\n    key_hash\n}\n\nunconstrained fn get_node_hash<let NODE_LEN: u32>(\n    rlp_header: RlpFragment,\n    node: [u8; NODE_LEN],\n) -> [u8; 32] {\n    let node_len = rlp_header.length + rlp_header.offset;\n    let resolved_hash: [u8; 32] = keccak256(node, node_len);\n    resolved_hash\n}\n\npub fn get_storage_key<let N: u32>(values: [[u8; 32]; N]) -> [u8; 32] {\n    let mut input: [u8; N * 32] = [0; N * 32];\n    for i in 0..N {\n        for j in 0..32 {\n            input[i * 32 + j] = values[i][j];\n        }\n    }\n    let key = keccak256(input, input.len());\n    get_key_hash(key, key.len())\n}\n\npub fn get_storage_value(field: Field) -> [u8; 32] {\n    let value_bytes: [u8; 32] = field.to_be_bytes();\n    let value_rlp = encode_rlp_string(value_bytes);\n    value_rlp\n}\n\n#[test]\nfn test_extension_node() {\n    let key = [\n        0x5a, 0x2c, 0x22, 0x15, 0x9a, 0x93, 0x50, 0x4b, 0xef, 0x3f, 0x17, 0x41, 0x08, 0xe0, 0x22,\n        0xfc, 0x5e, 0x36, 0xef, 0xba, 0xf4, 0x1d, 0xb9, 0xf4, 0x7c, 0x9e, 0x91, 0x1c, 0x5a, 0x84,\n        0x33, 0x6a,\n    ];\n    let storage_value = 0x10f0cf064dd59200000;\n    let storage_hash = [\n        0x34, 0xde, 0x45, 0x97, 0x59, 0x37, 0x39, 0xe9, 0xc8, 0xa3, 0x4e, 0x06, 0x86, 0xe2, 0xf5,\n        0x97, 0xd9, 0x07, 0xad, 0x36, 0x90, 0xaa, 0x76, 0xa4, 0x33, 0xe8, 0xc0, 0x9c, 0x8a, 0x7f,\n        0x06, 0x93,\n    ];\n    let storage_nodes = [\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x28, 0xa7, 0x1c, 0xcb, 0x5a, 0xaa, 0x3c, 0x97, 0xb4, 0x88,\n            0x94, 0xb6, 0x02, 0xbd, 0x09, 0x03, 0x9e, 0x4c, 0x29, 0x56, 0x89, 0xc4, 0xe5, 0xa9,\n            0xff, 0xbd, 0x70, 0xa9, 0xea, 0x63, 0x25, 0x67, 0xa0, 0x32, 0x24, 0xfd, 0x1a, 0x2c,\n            0x31, 0x0b, 0xfa, 0x08, 0x94, 0xa6, 0xea, 0x97, 0x22, 0xea, 0x6b, 0x8c, 0x7b, 0xe8,\n            0xf6, 0xdc, 0xd8, 0xf3, 0x9b, 0xcf, 0xa9, 0x9f, 0x99, 0xe4, 0xeb, 0x83, 0xff, 0xa0,\n            0x88, 0xc4, 0xc8, 0xea, 0xd8, 0x65, 0x4f, 0xa4, 0xbc, 0xb4, 0xce, 0xcf, 0x6b, 0xf0,\n            0x81, 0x17, 0x86, 0x10, 0x95, 0x5a, 0xfd, 0xf8, 0x1a, 0xb0, 0x6e, 0x6a, 0xb0, 0x1d,\n            0xb0, 0x8b, 0x3e, 0xa1, 0xa0, 0x44, 0x55, 0x33, 0x69, 0xd1, 0xbb, 0x02, 0x51, 0x2d,\n            0xab, 0x9f, 0x79, 0x3d, 0xdb, 0x0b, 0x2e, 0x8f, 0x8f, 0x1e, 0x83, 0x73, 0x86, 0x45,\n            0xe4, 0x72, 0x52, 0x5b, 0x0b, 0x14, 0xb1, 0x2a, 0xff, 0xa0, 0xf6, 0xc0, 0xea, 0xb0,\n            0x56, 0x14, 0xc9, 0x6f, 0x8d, 0x66, 0x44, 0x5a, 0xb5, 0x38, 0xba, 0x0f, 0x9d, 0x09,\n            0xa5, 0x9e, 0xd8, 0x1e, 0x00, 0x6d, 0xa5, 0xd9, 0x75, 0x0e, 0xb8, 0xcf, 0x12, 0x22,\n            0xa0, 0xe6, 0xfd, 0x1f, 0x02, 0x97, 0xcc, 0xda, 0x50, 0xa1, 0xa0, 0x2c, 0xa8, 0x03,\n            0x78, 0x9d, 0x29, 0xb7, 0xa7, 0xa5, 0x55, 0x33, 0x6b, 0x8f, 0xa5, 0x80, 0x9e, 0xa6,\n            0xf8, 0x1f, 0x97, 0x48, 0xed, 0xa0, 0xd2, 0x88, 0x65, 0x35, 0x91, 0x97, 0x3c, 0xb5,\n            0x76, 0x01, 0x73, 0x30, 0x46, 0xd2, 0x56, 0x8d, 0x49, 0xaa, 0x29, 0x36, 0xbf, 0x86,\n            0x6c, 0x37, 0x5e, 0x0b, 0x27, 0x0c, 0x98, 0x91, 0xcd, 0x12, 0xa0, 0xcc, 0x5a, 0x91,\n            0x26, 0xf5, 0x10, 0x1a, 0x7e, 0xb7, 0xd7, 0xd4, 0x32, 0x19, 0x39, 0x80, 0xaa, 0xa2,\n            0x42, 0xd0, 0x17, 0x64, 0x4c, 0xd3, 0xe5, 0x2c, 0x56, 0x2d, 0xdb, 0x9d, 0x57, 0x0b,\n            0x68, 0xa0, 0x6c, 0x0a, 0xc4, 0x76, 0x9b, 0xc7, 0xfa, 0xd2, 0x23, 0xf5, 0x9f, 0xb4,\n            0x85, 0x8c, 0x45, 0x85, 0xa9, 0xfe, 0x35, 0x5d, 0x65, 0xb8, 0xa0, 0x80, 0xe1, 0x7b,\n            0xaa, 0x29, 0x11, 0x5d, 0x8f, 0x20, 0xa0, 0x9d, 0x4c, 0x6e, 0x37, 0x00, 0xd0, 0x21,\n            0x66, 0xb4, 0x84, 0xb6, 0x90, 0x08, 0x4a, 0xca, 0x04, 0xde, 0x16, 0x88, 0xa6, 0xb5,\n            0x2a, 0x3f, 0xc7, 0xc7, 0xd9, 0xf6, 0x13, 0x75, 0x47, 0xcd, 0xdb, 0xa0, 0x51, 0xc1,\n            0x79, 0x4b, 0x97, 0xf1, 0x49, 0x0a, 0xfe, 0x3e, 0x04, 0xff, 0xc9, 0x47, 0x2c, 0x49,\n            0x6f, 0xb7, 0x98, 0x4f, 0xf3, 0xe3, 0x56, 0xc6, 0xff, 0x3b, 0xf9, 0x95, 0x3c, 0xbf,\n            0x4a, 0x39, 0xa0, 0xdd, 0xf1, 0x09, 0x06, 0xfb, 0x66, 0x45, 0x78, 0xe5, 0x8b, 0xdc,\n            0x86, 0xa3, 0x1f, 0x84, 0xd2, 0xda, 0xac, 0xd7, 0x12, 0xab, 0x7d, 0xbe, 0x4a, 0x93,\n            0xaf, 0x57, 0x33, 0xfc, 0xe2, 0x58, 0x8c, 0xa0, 0xe8, 0xdd, 0xe7, 0x0e, 0xf4, 0x76,\n            0x34, 0x88, 0x80, 0xb3, 0x71, 0xda, 0xaa, 0xae, 0xa6, 0xcc, 0x14, 0xa0, 0x72, 0xb3,\n            0x54, 0xc7, 0x8c, 0x14, 0xdd, 0x22, 0x3a, 0x94, 0x47, 0xe2, 0xfe, 0x9a, 0xa0, 0x51,\n            0xd0, 0xa8, 0xd0, 0x7e, 0x98, 0x8d, 0xa3, 0xd7, 0x5f, 0x99, 0x3d, 0xeb, 0x12, 0xa1,\n            0x0d, 0x7f, 0x16, 0x11, 0x51, 0x00, 0x29, 0x11, 0xb2, 0x52, 0x2e, 0x70, 0xd4, 0xab,\n            0xae, 0x40, 0x05, 0xa0, 0xb6, 0x2f, 0xd4, 0x3d, 0x5c, 0xd4, 0x42, 0x29, 0xc1, 0x02,\n            0xba, 0x61, 0x68, 0x8a, 0x73, 0x50, 0x79, 0xdd, 0xbe, 0xae, 0x36, 0x19, 0xc7, 0x3b,\n            0x85, 0x2e, 0x4d, 0xe0, 0x6a, 0x17, 0xc6, 0x45, 0xa0, 0x34, 0xb7, 0x65, 0xe4, 0x01,\n            0x0e, 0x6c, 0xa4, 0x50, 0x75, 0xbc, 0x17, 0x62, 0x9d, 0x1a, 0x97, 0xb8, 0xf4, 0x82,\n            0x8f, 0xa9, 0x20, 0x54, 0x64, 0x2d, 0x3d, 0x5e, 0x03, 0x5c, 0x28, 0x06, 0x57, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x56, 0xaa, 0xc2, 0x80, 0x10, 0x2f, 0xa7, 0xc4, 0x9f, 0xa6,\n            0xba, 0xa3, 0x31, 0xa2, 0x47, 0x45, 0x90, 0x1d, 0x33, 0x24, 0xbb, 0x75, 0x98, 0x1b,\n            0x33, 0xf0, 0xb8, 0x53, 0xb6, 0x62, 0xb7, 0x35, 0xa0, 0x77, 0x55, 0xbe, 0xe7, 0x1d,\n            0x77, 0x54, 0xca, 0x81, 0x21, 0xc1, 0x5c, 0xff, 0xef, 0x3d, 0xeb, 0xb8, 0xd2, 0x3d,\n            0x22, 0xdb, 0x53, 0x14, 0x15, 0xb0, 0xd2, 0x67, 0x09, 0xad, 0x22, 0x2b, 0xcc, 0xa0,\n            0xea, 0x48, 0x65, 0x3b, 0x32, 0x09, 0xcc, 0x7b, 0x75, 0x66, 0x7a, 0x15, 0xec, 0xb7,\n            0xbd, 0x08, 0xee, 0x55, 0x25, 0x60, 0x01, 0xa6, 0xfa, 0xa6, 0x2d, 0x4b, 0xeb, 0x23,\n            0x54, 0x7a, 0xdf, 0x56, 0xa0, 0xe8, 0xaf, 0x8c, 0xbe, 0x69, 0x16, 0x05, 0xd9, 0x50,\n            0x9b, 0xce, 0x5f, 0x95, 0xe9, 0x9f, 0x1a, 0x98, 0xef, 0xd3, 0xe7, 0x14, 0x41, 0xa0,\n            0x95, 0xd2, 0x83, 0xbd, 0x85, 0x5c, 0xb8, 0x3e, 0x04, 0xa0, 0x6d, 0x22, 0x70, 0x5c,\n            0xa5, 0x7c, 0x20, 0xb0, 0x72, 0x18, 0xd9, 0x3b, 0xcb, 0xfc, 0xcb, 0xc7, 0x13, 0xd5,\n            0x93, 0x82, 0xb0, 0xf6, 0x0b, 0xb2, 0x9b, 0x3b, 0xd4, 0x57, 0x2f, 0x9b, 0x1c, 0x2e,\n            0xa0, 0xc1, 0xfa, 0x7f, 0x64, 0xa7, 0x0c, 0x00, 0x9a, 0x5b, 0x4f, 0x05, 0xfd, 0x72,\n            0x18, 0xe5, 0xc3, 0x89, 0x8d, 0x9c, 0x54, 0xb5, 0x3d, 0x3e, 0xbb, 0xfa, 0x96, 0x59,\n            0xe1, 0x0e, 0x6b, 0x10, 0x5f, 0xa0, 0xef, 0x50, 0xe1, 0xbf, 0x33, 0xc0, 0xaa, 0x29,\n            0x7a, 0x52, 0x9d, 0xe8, 0xd2, 0x0c, 0xb0, 0xee, 0x00, 0x12, 0x1e, 0x9a, 0x74, 0xdd,\n            0x94, 0x46, 0xfe, 0xe5, 0xd8, 0xe9, 0xb5, 0xb8, 0x1e, 0x46, 0xa0, 0x57, 0xa6, 0x13,\n            0xff, 0x1d, 0x2d, 0xaf, 0x80, 0x34, 0x36, 0x01, 0xa8, 0xb4, 0x26, 0x5d, 0x4a, 0x69,\n            0x4c, 0x8c, 0x78, 0x7e, 0x91, 0x71, 0x73, 0xa4, 0x9c, 0x5a, 0x11, 0xc5, 0x8b, 0xda,\n            0x8e, 0xa0, 0xb1, 0xc0, 0x8e, 0xb9, 0x55, 0x73, 0xab, 0x5e, 0x5f, 0xa8, 0xdd, 0xb5,\n            0xf7, 0xf3, 0x7d, 0x7d, 0x8a, 0xab, 0xcc, 0x0c, 0x74, 0x80, 0x15, 0x84, 0x64, 0xe0,\n            0x34, 0xcf, 0x86, 0x9d, 0xf5, 0xb8, 0xa0, 0x3e, 0xed, 0x8a, 0xd1, 0x04, 0xde, 0x9b,\n            0xca, 0x13, 0x28, 0xc9, 0x22, 0xdd, 0x8b, 0x3a, 0x94, 0x82, 0x56, 0xe1, 0x7a, 0xc9,\n            0x40, 0x8c, 0x90, 0x65, 0xc5, 0xb1, 0xb2, 0xc2, 0x1c, 0x88, 0xdb, 0xa0, 0xd3, 0x69,\n            0x3d, 0xe8, 0x7b, 0xbe, 0x22, 0x58, 0xc1, 0x52, 0xb4, 0x93, 0x53, 0x71, 0x12, 0xf9,\n            0xf8, 0x2d, 0xac, 0x64, 0x50, 0x36, 0xfe, 0xe3, 0x17, 0x8c, 0x67, 0x66, 0xc7, 0xf9,\n            0x37, 0xf3, 0xa0, 0x40, 0xeb, 0x93, 0xf5, 0x01, 0x70, 0x4a, 0xb5, 0xce, 0x0c, 0x7c,\n            0x51, 0x84, 0x6e, 0xee, 0x54, 0xf9, 0x28, 0xfd, 0x8b, 0xe1, 0x90, 0x3e, 0x65, 0xa0,\n            0x95, 0x64, 0x10, 0x76, 0xc8, 0xa4, 0x47, 0xa0, 0x50, 0x73, 0xa4, 0xe9, 0x3d, 0x9a,\n            0x55, 0xe4, 0x7f, 0xb2, 0x02, 0x63, 0x79, 0x99, 0x54, 0x22, 0xcd, 0xcb, 0xc7, 0x35,\n            0x8a, 0xa4, 0xf9, 0x6f, 0xce, 0x90, 0x5d, 0x3c, 0x48, 0xda, 0x50, 0xfe, 0xa0, 0x2f,\n            0x3e, 0x7e, 0x72, 0xc8, 0x10, 0x8a, 0x29, 0xf3, 0x83, 0x65, 0x51, 0x66, 0xfb, 0x42,\n            0x3a, 0xd8, 0x2e, 0xf3, 0x35, 0x21, 0x87, 0x6d, 0x18, 0xbd, 0x3d, 0x96, 0x35, 0x27,\n            0x00, 0xd4, 0x70, 0xa0, 0x10, 0x6d, 0x69, 0xfe, 0xa8, 0xfa, 0x71, 0x69, 0x0d, 0xaf,\n            0xea, 0xd4, 0x34, 0xac, 0x06, 0xad, 0xe2, 0xcd, 0xd5, 0xd8, 0x69, 0x87, 0x62, 0x55,\n            0x0d, 0x3c, 0x4f, 0x7b, 0x90, 0x63, 0xd5, 0x9b, 0xa0, 0x28, 0xb7, 0xcd, 0x5c, 0x70,\n            0xa5, 0xda, 0x11, 0xce, 0x79, 0xda, 0x74, 0x2e, 0x79, 0xb9, 0xf0, 0xf1, 0x02, 0xa2,\n            0x1d, 0x7a, 0xdf, 0x31, 0xb2, 0xb2, 0x9b, 0x9c, 0xf1, 0x46, 0xfd, 0x42, 0x92, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x80, 0xf6, 0x43, 0xcf, 0xf4, 0x69, 0xbd, 0x2b, 0x75, 0xd7,\n            0x46, 0xad, 0xa3, 0xf5, 0xcf, 0x1b, 0xac, 0xcf, 0xb8, 0xee, 0x12, 0x23, 0x09, 0x49,\n            0x07, 0xbb, 0x0e, 0x60, 0x92, 0x78, 0x8e, 0x4d, 0xa0, 0xdf, 0x6e, 0x72, 0xce, 0x27,\n            0x0e, 0x9e, 0x54, 0x65, 0x27, 0x85, 0x66, 0x62, 0xb5, 0x45, 0xab, 0x70, 0x6f, 0xfd,\n            0x42, 0xda, 0x99, 0xd2, 0xb3, 0x66, 0x76, 0xd7, 0xe3, 0x5f, 0xc0, 0x6f, 0xcf, 0xa0,\n            0x47, 0x17, 0xa5, 0xde, 0xff, 0xfb, 0xc5, 0x9a, 0xbd, 0x1e, 0x38, 0x38, 0x3c, 0xf8,\n            0x65, 0x59, 0x06, 0xe2, 0xae, 0x68, 0xb7, 0x70, 0x5d, 0xe8, 0x11, 0xe3, 0x2e, 0x2d,\n            0x98, 0x53, 0xd3, 0x65, 0xa0, 0xa2, 0x48, 0x0f, 0x7c, 0xdd, 0xe0, 0x4a, 0x37, 0x2a,\n            0xcb, 0xe2, 0x34, 0x36, 0xac, 0xaf, 0x82, 0x99, 0xcf, 0x1d, 0xbc, 0xbe, 0xf8, 0xba,\n            0x5b, 0x42, 0xf8, 0x7a, 0xc1, 0x27, 0xe6, 0x55, 0x5c, 0xa0, 0x29, 0x0e, 0xda, 0x5f,\n            0xc1, 0x9f, 0xca, 0x90, 0xd3, 0x06, 0x3b, 0xa9, 0x6b, 0x5e, 0x13, 0xb2, 0x3f, 0x28,\n            0x6d, 0x57, 0xed, 0x91, 0xd0, 0x80, 0xb9, 0xca, 0xe1, 0xc8, 0xe4, 0x5c, 0xaf, 0xd6,\n            0xa0, 0x02, 0x34, 0x35, 0x35, 0xf7, 0x0f, 0x41, 0x5e, 0x3d, 0x9c, 0x16, 0xfd, 0xff,\n            0xa1, 0x36, 0x3b, 0xd0, 0x79, 0xf0, 0x2b, 0x51, 0xb3, 0x88, 0x18, 0x54, 0xff, 0x17,\n            0xdb, 0xfe, 0x55, 0x23, 0xf9, 0xa0, 0x8f, 0x9a, 0x23, 0xbb, 0x74, 0xd0, 0xb7, 0x65,\n            0x35, 0xdb, 0x37, 0x24, 0x30, 0x6d, 0x29, 0xbc, 0xf5, 0xbb, 0x07, 0x05, 0x97, 0x70,\n            0x22, 0x32, 0x26, 0x18, 0x93, 0x39, 0x7b, 0x4f, 0x7a, 0x1e, 0xa0, 0xa7, 0xa4, 0x24,\n            0x74, 0x9f, 0x95, 0xe8, 0x1c, 0x6b, 0x71, 0xe7, 0x7b, 0x6c, 0xb3, 0xe6, 0x18, 0x3e,\n            0x40, 0x6d, 0x9c, 0x9b, 0x0f, 0xef, 0x45, 0xce, 0x57, 0x46, 0xaa, 0xce, 0x10, 0xf3,\n            0x1f, 0xa0, 0xd1, 0xcd, 0x19, 0x02, 0x5c, 0xb7, 0x8a, 0xba, 0x94, 0x67, 0x07, 0xea,\n            0x7a, 0x3d, 0x36, 0x3c, 0xc2, 0xd6, 0xf9, 0x1a, 0x72, 0xe6, 0xf3, 0xa0, 0x5b, 0x42,\n            0x53, 0x4d, 0x6f, 0x4d, 0x11, 0x2f, 0xa0, 0xdf, 0x25, 0x21, 0x36, 0x74, 0x9f, 0x9e,\n            0xa9, 0x0e, 0xef, 0x15, 0x51, 0x88, 0x28, 0x40, 0xf5, 0xd1, 0x2e, 0xf4, 0xa8, 0x3c,\n            0x5c, 0xfe, 0x81, 0x70, 0x17, 0x91, 0xef, 0xdf, 0xe6, 0xec, 0xcb, 0xa0, 0x19, 0xc0,\n            0xb8, 0x68, 0x06, 0xb1, 0x03, 0xaa, 0x9d, 0xed, 0xb0, 0xa4, 0x70, 0xdd, 0xac, 0xc9,\n            0xd1, 0x11, 0x90, 0x75, 0x58, 0xed, 0x79, 0x6c, 0x58, 0x05, 0x21, 0x14, 0x03, 0x47,\n            0xc8, 0x99, 0xa0, 0x7b, 0x21, 0x30, 0x45, 0x04, 0x78, 0xfd, 0x6b, 0xf8, 0x25, 0x42,\n            0x44, 0x3f, 0x64, 0xf1, 0x57, 0xde, 0xa6, 0x43, 0x69, 0xd8, 0xd9, 0xc1, 0xfc, 0x3c,\n            0xe6, 0x80, 0xd9, 0x27, 0xd7, 0x1b, 0x14, 0xa0, 0xa7, 0x88, 0xdf, 0xcc, 0x27, 0x7b,\n            0xc6, 0xbf, 0x15, 0x5f, 0xeb, 0xff, 0xa7, 0x18, 0xda, 0x71, 0x95, 0xd0, 0x64, 0x2e,\n            0xb8, 0x4e, 0x38, 0x34, 0xc5, 0xfb, 0x33, 0x99, 0x47, 0xb5, 0x3b, 0xb2, 0xa0, 0x19,\n            0x38, 0xd2, 0xff, 0x88, 0xfa, 0xb0, 0x07, 0x8c, 0xd1, 0xff, 0x34, 0x53, 0xbe, 0xae,\n            0x3f, 0x4d, 0x31, 0xc3, 0x45, 0x36, 0xc4, 0xff, 0xc3, 0xba, 0x26, 0xcf, 0x57, 0xd4,\n            0x19, 0xdf, 0xfc, 0xa0, 0xb7, 0xe7, 0x38, 0x57, 0x54, 0x28, 0x34, 0x0c, 0x8a, 0xc7,\n            0xe0, 0x65, 0x9c, 0xca, 0x51, 0x85, 0x57, 0x98, 0x17, 0xa0, 0x45, 0xdf, 0x0d, 0x9d,\n            0x31, 0x24, 0x2d, 0xba, 0x7a, 0xac, 0x08, 0x17, 0xa0, 0x82, 0x20, 0x4e, 0xa9, 0x74,\n            0x64, 0x16, 0xe4, 0xa3, 0x56, 0x4f, 0xde, 0x12, 0x3d, 0x60, 0x9c, 0x17, 0x43, 0x48,\n            0x19, 0xfc, 0x7f, 0x47, 0x29, 0xde, 0x45, 0x9f, 0xd4, 0x5f, 0xe5, 0x87, 0x83, 0x80,\n        ],\n        [\n            0xf9, 0x01, 0xb1, 0x80, 0xa0, 0x8e, 0x38, 0xfd, 0x86, 0xe5, 0x4b, 0x8a, 0x12, 0x43,\n            0x58, 0x9a, 0x22, 0x9d, 0xb7, 0xcf, 0x04, 0x9c, 0x18, 0xa4, 0xb8, 0xff, 0xb8, 0x27,\n            0xf6, 0x80, 0x36, 0xfa, 0xef, 0x88, 0xae, 0xcd, 0x9a, 0xa0, 0xa5, 0x55, 0x23, 0xc6,\n            0xfc, 0x4b, 0xc1, 0xf7, 0x46, 0xd9, 0xec, 0x50, 0x7f, 0xf4, 0xdf, 0x46, 0x0f, 0xb3,\n            0x58, 0xf9, 0x7f, 0x66, 0xbd, 0x06, 0x11, 0xf0, 0xf2, 0xa6, 0xff, 0x28, 0x23, 0xa9,\n            0x80, 0xa0, 0xb5, 0xc8, 0xe0, 0x56, 0x7f, 0xe1, 0x4c, 0x0d, 0x96, 0x0a, 0x32, 0x31,\n            0xb8, 0x9f, 0x5a, 0xb9, 0x79, 0x73, 0xc9, 0xdc, 0x83, 0xc7, 0x12, 0x6b, 0x2a, 0x39,\n            0xfb, 0xf1, 0xac, 0xa8, 0xb2, 0xb2, 0x80, 0xa0, 0x55, 0x09, 0x98, 0x12, 0xe4, 0x20,\n            0xce, 0x25, 0x48, 0x3f, 0xc4, 0x75, 0x50, 0x3b, 0x0f, 0xcb, 0x6d, 0x7f, 0x8c, 0x78,\n            0x5e, 0xb0, 0x02, 0x9e, 0xeb, 0x78, 0xc1, 0x4c, 0x1c, 0x71, 0x51, 0xcc, 0xa0, 0x68,\n            0x2a, 0x76, 0x86, 0xa1, 0xcf, 0x94, 0xe8, 0xef, 0x0c, 0xc0, 0x13, 0xef, 0x43, 0x93,\n            0xf7, 0x42, 0xa9, 0x0a, 0x10, 0xa8, 0xcc, 0xad, 0xcc, 0x96, 0xc5, 0x4f, 0xfd, 0x10,\n            0x05, 0x05, 0x7b, 0xa0, 0x98, 0xa9, 0x2b, 0xe0, 0x12, 0xe2, 0x1f, 0x6c, 0x29, 0xf5,\n            0xc9, 0x51, 0xc8, 0x48, 0x42, 0x4b, 0x99, 0xf8, 0xca, 0x97, 0x86, 0xca, 0xef, 0x4c,\n            0xc2, 0x19, 0x2e, 0x51, 0x47, 0x23, 0x5d, 0x60, 0xa0, 0x39, 0xc3, 0x38, 0x6e, 0xf5,\n            0xed, 0xb0, 0x5b, 0x00, 0x8e, 0xb2, 0x57, 0xde, 0xd4, 0x67, 0x7f, 0x5e, 0x0a, 0x39,\n            0xc9, 0xea, 0x99, 0x2b, 0x64, 0x7e, 0x43, 0x4e, 0x67, 0x1c, 0xa2, 0x33, 0x63, 0xa0,\n            0xbb, 0x9f, 0x27, 0xc7, 0xe7, 0x7a, 0x3b, 0xed, 0x91, 0x7d, 0x82, 0x6e, 0x14, 0xcb,\n            0x9e, 0x7f, 0x48, 0x18, 0x1e, 0xe0, 0x14, 0x39, 0x02, 0xb9, 0x4c, 0x92, 0xd8, 0x64,\n            0xcc, 0x5c, 0xfc, 0xf1, 0xa0, 0x2c, 0x46, 0xa9, 0xd4, 0x7e, 0x7e, 0x8c, 0x6a, 0x37,\n            0x4c, 0x01, 0x5a, 0x1a, 0x5f, 0x50, 0x21, 0x10, 0x52, 0x77, 0xeb, 0x52, 0xec, 0x74,\n            0x2a, 0xa4, 0x64, 0x87, 0x50, 0xb4, 0x07, 0x7d, 0xd5, 0xa0, 0x55, 0x8b, 0x7a, 0xe0,\n            0xa4, 0x3f, 0x3f, 0xdd, 0x17, 0xbb, 0x30, 0xa5, 0xfa, 0x1b, 0x7d, 0x70, 0x11, 0x15,\n            0xeb, 0x8b, 0x0b, 0x7f, 0xc7, 0xd4, 0x78, 0xad, 0x98, 0xe7, 0x51, 0xf7, 0xe7, 0x01,\n            0xa0, 0x06, 0xb4, 0x34, 0x68, 0x33, 0x9a, 0xdc, 0xfe, 0xb6, 0xc1, 0x2d, 0xbd, 0x6e,\n            0xa3, 0x3b, 0xa9, 0xc4, 0xd7, 0xad, 0x97, 0x68, 0x3c, 0x6a, 0x53, 0x39, 0x4b, 0x3f,\n            0x40, 0x6d, 0x06, 0xb6, 0x48, 0xa0, 0xa9, 0x51, 0x44, 0xcc, 0x87, 0x7d, 0xc0, 0x04,\n            0xd3, 0x6b, 0x36, 0x48, 0x9a, 0x91, 0xa6, 0x21, 0xf0, 0xeb, 0xe6, 0x3b, 0x36, 0x33,\n            0x1c, 0xd5, 0x36, 0xfb, 0x7a, 0x40, 0x86, 0x96, 0xb3, 0xd1, 0xa0, 0x59, 0x9d, 0xaa,\n            0xca, 0x7c, 0x1a, 0x10, 0xbd, 0x9f, 0x12, 0xe0, 0x5a, 0x57, 0xff, 0x66, 0x16, 0xbb,\n            0x5a, 0xc4, 0x00, 0x89, 0x9c, 0x4c, 0xa4, 0x69, 0xa8, 0xd2, 0x07, 0x44, 0x79, 0xa3,\n            0x2e, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0xe2, 0x12, 0xa0, 0xcd, 0xb7, 0x93, 0xcf, 0xa4, 0x0f, 0x9d, 0x96, 0x3c, 0x88, 0xd9,\n            0xf9, 0x67, 0x50, 0x30, 0x13, 0xdf, 0xe9, 0xad, 0x93, 0x33, 0x38, 0xd6, 0xe6, 0x64,\n            0x89, 0x17, 0xc4, 0xc7, 0x8f, 0x16, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0xf8, 0x71, 0x80, 0x80, 0x80, 0xa0, 0xdc, 0xc7, 0x71, 0xae, 0x6a, 0x42, 0x35, 0xd3,\n            0x33, 0x9b, 0xbb, 0xf2, 0x04, 0xf6, 0x2e, 0x34, 0x09, 0x72, 0x08, 0xb4, 0x0d, 0x4b,\n            0x02, 0xdc, 0xfb, 0x91, 0x08, 0x00, 0x16, 0x47, 0xdd, 0x60, 0x80, 0x80, 0x80, 0xa0,\n            0xbc, 0x90, 0x80, 0x25, 0x16, 0xd2, 0x72, 0xd0, 0xb6, 0x1a, 0xf7, 0x2f, 0xb9, 0xb2,\n            0x02, 0xf1, 0x19, 0xbd, 0xdd, 0x1b, 0x52, 0x4b, 0x3d, 0x3f, 0xa1, 0xbf, 0x4a, 0x13,\n            0x82, 0xaf, 0xcb, 0x53, 0x80, 0x80, 0x80, 0x80, 0x80, 0xa0, 0xfd, 0x92, 0x65, 0xd7,\n            0x1e, 0x60, 0x5a, 0x77, 0x8d, 0x0d, 0x80, 0x23, 0x4e, 0x4b, 0xaa, 0xf4, 0x17, 0x01,\n            0x60, 0xf1, 0x4c, 0xd1, 0x19, 0xd2, 0x2d, 0x53, 0xd3, 0x34, 0xed, 0xb9, 0x88, 0xaf,\n            0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n    ];\n    let storage_leaf = [\n        0xeb, 0x9e, 0x20, 0x2d, 0x80, 0x77, 0x15, 0x55, 0x8b, 0x0e, 0x74, 0x16, 0x55, 0x33, 0x9a,\n        0x57, 0x47, 0xd4, 0xc8, 0x73, 0xa2, 0x36, 0xe6, 0x52, 0xb0, 0x2c, 0xf1, 0x7d, 0xfa, 0x2a,\n        0xe4, 0xc2, 0x8b, 0x8a, 0x01, 0x0f, 0x0c, 0xf0, 0x64, 0xdd, 0x59, 0x20, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    ];\n    let storage_depth = 7;\n\n    let value = get_storage_value(storage_value);\n\n    verify(\n        key,\n        value,\n        storage_hash,\n        storage_nodes,\n        storage_leaf,\n        storage_depth,\n    );\n}\n\n#[test]\nfn test_leaf() {\n    let key = [\n        0xd2, 0xfd, 0xbe, 0x6a, 0xe5, 0x06, 0x6a, 0x91, 0x19, 0x14, 0xd5, 0xf5, 0x45, 0x84, 0xaf,\n        0xbb, 0xf8, 0xbe, 0x02, 0x1c, 0x12, 0x4f, 0x4c, 0xe7, 0x0d, 0xf1, 0xae, 0x5a, 0xf2, 0x2d,\n        0x0a, 0xf5,\n    ];\n    let storage_value = 0x21e19e0c9bab2400000;\n    let storage_hash = [\n        0x58, 0x64, 0xda, 0x37, 0xf3, 0xad, 0xb7, 0x02, 0x97, 0x46, 0x48, 0x59, 0x12, 0xd3, 0x83,\n        0x8a, 0x09, 0x9b, 0x77, 0x85, 0x24, 0x5f, 0x5d, 0x1c, 0xba, 0xd2, 0x48, 0x3c, 0x77, 0xe5,\n        0xb9, 0xb8,\n    ];\n    let storage_nodes = [\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0xf1, 0x5a, 0xd0, 0x08, 0x86, 0xfb, 0x23, 0x2f, 0x6b, 0x11,\n            0xf6, 0xb5, 0xc8, 0xa5, 0x24, 0xcc, 0xf6, 0x0d, 0xb1, 0xf2, 0xb9, 0xb6, 0x24, 0x23,\n            0x8c, 0x69, 0x9d, 0xba, 0x5b, 0xff, 0x32, 0xcc, 0xa0, 0x63, 0xd9, 0xe6, 0xfd, 0xca,\n            0x9a, 0x48, 0xca, 0xed, 0x0e, 0xd1, 0x33, 0x79, 0x86, 0x4b, 0x0b, 0xe3, 0xa1, 0xdc,\n            0xc4, 0xf2, 0xfe, 0x70, 0x16, 0x53, 0x7e, 0xc7, 0xfa, 0x04, 0x9f, 0x63, 0x39, 0xa0,\n            0xef, 0xba, 0x20, 0xf2, 0x22, 0x10, 0x0b, 0xe4, 0x0c, 0xcd, 0x76, 0x78, 0x95, 0x09,\n            0x1f, 0x45, 0x74, 0x71, 0xa8, 0xa5, 0x3c, 0x8d, 0x11, 0x8d, 0xb3, 0x1c, 0x2b, 0xf8,\n            0xec, 0x90, 0x61, 0x44, 0xa0, 0xe3, 0xb7, 0xc4, 0x1e, 0xd7, 0xc4, 0xe1, 0x68, 0x0f,\n            0x0e, 0xb3, 0xf5, 0x59, 0xec, 0x92, 0xec, 0x46, 0x93, 0x50, 0xda, 0x10, 0x8e, 0x52,\n            0x59, 0xc6, 0xcc, 0x96, 0x1b, 0x8c, 0x61, 0x3c, 0x0b, 0xa0, 0x67, 0xa5, 0x6b, 0xed,\n            0xe6, 0x90, 0x17, 0xc7, 0x79, 0xdd, 0x2e, 0xb2, 0xdd, 0xa8, 0x50, 0xeb, 0x94, 0xf1,\n            0x59, 0x3b, 0xdb, 0x6f, 0xf8, 0xad, 0xa0, 0x8a, 0x1c, 0x71, 0x30, 0xea, 0x22, 0x42,\n            0xa0, 0xa4, 0xff, 0x62, 0xc8, 0xdf, 0x54, 0x1a, 0xd6, 0x7a, 0xb8, 0x1c, 0x75, 0x92,\n            0x1c, 0x9f, 0x66, 0x09, 0xba, 0xe3, 0xcf, 0x37, 0xe0, 0x8e, 0x74, 0x6f, 0x88, 0x7a,\n            0xb3, 0xee, 0xa9, 0x9d, 0xee, 0xa0, 0x83, 0xd6, 0xaa, 0x68, 0xf3, 0xac, 0xf1, 0x61,\n            0xd6, 0x0e, 0x88, 0xb2, 0x3a, 0xbd, 0x71, 0xf2, 0xcd, 0xd8, 0x9c, 0xfe, 0x3f, 0x3c,\n            0xfa, 0x56, 0x89, 0x1a, 0xec, 0xac, 0x46, 0xbb, 0xb2, 0x60, 0xa0, 0xde, 0xd9, 0x98,\n            0xb3, 0x81, 0x6f, 0x64, 0x82, 0x92, 0x9a, 0x7c, 0xc5, 0x04, 0x3e, 0xd5, 0x2e, 0x74,\n            0x66, 0x74, 0x2a, 0x40, 0x51, 0x33, 0xe8, 0xfd, 0x79, 0x73, 0x8e, 0x58, 0x5a, 0x2b,\n            0x41, 0xa0, 0x63, 0x13, 0x0b, 0x03, 0x90, 0x69, 0x73, 0xfe, 0x54, 0x90, 0x75, 0xe7,\n            0x6a, 0x82, 0xc2, 0x42, 0x3c, 0xb5, 0x74, 0x6c, 0x45, 0x32, 0x73, 0x21, 0x89, 0xfb,\n            0x28, 0xd4, 0x95, 0x46, 0xee, 0x3f, 0xa0, 0xe7, 0xe6, 0x52, 0x90, 0x39, 0x1d, 0x0f,\n            0x30, 0xe9, 0x26, 0xdb, 0x82, 0xe3, 0x45, 0xde, 0x5d, 0x3b, 0x6f, 0x29, 0x31, 0xc3,\n            0xf4, 0xa2, 0x39, 0xf7, 0xf8, 0x1f, 0x7f, 0xd2, 0x0e, 0xc6, 0xea, 0xa0, 0xfd, 0x16,\n            0xa9, 0xf5, 0x98, 0xdd, 0xaa, 0x32, 0x9b, 0x54, 0x4d, 0xcd, 0xac, 0xc1, 0xd8, 0x2e,\n            0x6e, 0x20, 0x72, 0xb5, 0x7f, 0x2a, 0x98, 0x4b, 0x6d, 0x7f, 0xb9, 0x95, 0x23, 0xff,\n            0x04, 0xc1, 0xa0, 0x4a, 0x5d, 0x73, 0x80, 0x6d, 0x25, 0x33, 0x4e, 0xfe, 0x03, 0x4a,\n            0x2a, 0xd7, 0x2b, 0xf2, 0x5e, 0xcb, 0xe1, 0x09, 0x78, 0x2c, 0xdb, 0x7d, 0xe9, 0xd0,\n            0x63, 0x2a, 0x74, 0x3e, 0xfd, 0xa4, 0x95, 0xa0, 0x13, 0xdd, 0x76, 0x35, 0xba, 0xde,\n            0x3b, 0xa5, 0x44, 0x85, 0x03, 0x6e, 0xc9, 0x71, 0xa5, 0x57, 0x95, 0xb3, 0xb4, 0x41,\n            0x1a, 0x27, 0x21, 0xab, 0x45, 0x70, 0x45, 0xb5, 0x83, 0x3b, 0x51, 0xf9, 0xa0, 0x93,\n            0x36, 0x91, 0xaa, 0x79, 0xa7, 0x11, 0x09, 0x04, 0xb7, 0x0c, 0x58, 0x77, 0xa7, 0x85,\n            0x60, 0x8e, 0x8c, 0x67, 0x10, 0x96, 0x43, 0x50, 0x68, 0x76, 0xe0, 0x0a, 0xdd, 0x49,\n            0xc1, 0x40, 0x4e, 0xa0, 0x98, 0xe5, 0x9b, 0xae, 0x17, 0xea, 0xa4, 0x8b, 0x0e, 0xcb,\n            0xc5, 0xb0, 0xb5, 0x61, 0x5e, 0x87, 0xb2, 0x8a, 0x8b, 0x20, 0x31, 0x03, 0x01, 0xb6,\n            0xf6, 0x58, 0x8a, 0xfb, 0xcc, 0x88, 0x65, 0x20, 0xa0, 0xb5, 0x20, 0xca, 0xf5, 0x70,\n            0x91, 0xaa, 0x1a, 0xf0, 0x88, 0xb8, 0xea, 0xa1, 0xa9, 0x22, 0x1f, 0x50, 0x2d, 0x6e,\n            0xe7, 0x21, 0x9e, 0x16, 0xf2, 0xe6, 0xed, 0x27, 0x67, 0x16, 0x8b, 0x73, 0x04, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0xb9, 0xb6, 0x8f, 0xef, 0x90, 0x9e, 0xaa, 0x5d, 0x59, 0xc3,\n            0xcb, 0x3c, 0xab, 0x0e, 0xdc, 0x57, 0xc5, 0x09, 0x5c, 0x9e, 0x3e, 0xa5, 0xea, 0x0a,\n            0x94, 0xbb, 0x15, 0x08, 0x31, 0x25, 0xf6, 0xf0, 0xa0, 0x2c, 0x33, 0xf1, 0x64, 0xbd,\n            0x72, 0xa7, 0x7b, 0xf5, 0x33, 0x6d, 0xac, 0x20, 0xb3, 0x97, 0x55, 0xd9, 0xb8, 0xfa,\n            0x28, 0xa8, 0x9e, 0x17, 0x54, 0xe4, 0x03, 0x08, 0xbc, 0x11, 0xdf, 0x85, 0x2b, 0xa0,\n            0x9f, 0x66, 0xbe, 0x57, 0x14, 0x9b, 0xe3, 0xdf, 0x58, 0x8c, 0x4d, 0x17, 0x4a, 0xdd,\n            0x3b, 0x3a, 0x57, 0xc7, 0x73, 0x47, 0x47, 0xd4, 0x3d, 0x6d, 0x4d, 0xb9, 0xef, 0xc4,\n            0x73, 0x43, 0x0b, 0x79, 0xa0, 0xb6, 0x58, 0xb9, 0x08, 0xcf, 0xc5, 0x45, 0x50, 0xa7,\n            0xe6, 0x67, 0x43, 0x47, 0x2e, 0x6d, 0xfa, 0xa1, 0xc9, 0x76, 0x40, 0xb0, 0xff, 0x03,\n            0xc1, 0xed, 0x89, 0xce, 0x0e, 0xdd, 0xe1, 0x03, 0x12, 0xa0, 0x6b, 0x57, 0xb7, 0xcb,\n            0x38, 0x72, 0xc3, 0xe9, 0x57, 0x00, 0xce, 0x78, 0x6e, 0xe4, 0xa4, 0xff, 0x04, 0xf4,\n            0x26, 0xc3, 0x4b, 0xa6, 0x1f, 0x6b, 0x89, 0xec, 0xa8, 0x0d, 0x86, 0xed, 0xd0, 0x79,\n            0xa0, 0x0f, 0xe0, 0x3e, 0xff, 0x73, 0x27, 0x00, 0xb8, 0xe9, 0xd7, 0x36, 0xcc, 0x39,\n            0x11, 0xf1, 0xd4, 0xb2, 0x38, 0xd9, 0x1e, 0x9b, 0xde, 0xf9, 0xda, 0x40, 0x0d, 0x7f,\n            0xb7, 0x89, 0x22, 0x22, 0xa7, 0xa0, 0x11, 0xb1, 0x06, 0xe0, 0x5e, 0x31, 0xe1, 0xe0,\n            0x76, 0x72, 0xb5, 0x77, 0x99, 0xd1, 0x09, 0x77, 0x36, 0x6b, 0x12, 0x2b, 0xb5, 0x0e,\n            0xdf, 0x67, 0xf0, 0x8b, 0x80, 0x31, 0x1e, 0xc3, 0x29, 0x10, 0xa0, 0xa9, 0x7c, 0x62,\n            0x6e, 0x36, 0x00, 0x1e, 0xc4, 0x22, 0x34, 0xa5, 0x6e, 0x19, 0xec, 0xc7, 0xd3, 0x37,\n            0xa9, 0xae, 0x4c, 0x00, 0x8b, 0x98, 0x33, 0x53, 0x11, 0xc5, 0x5b, 0x39, 0x5a, 0x2a,\n            0xe5, 0xa0, 0x7e, 0x8a, 0x86, 0xa9, 0x0e, 0xc1, 0x07, 0x6a, 0x57, 0x19, 0x3d, 0x7c,\n            0x9a, 0xa0, 0xbf, 0x80, 0xc1, 0xe2, 0x05, 0x17, 0x50, 0xc8, 0x48, 0xea, 0x50, 0x66,\n            0x0d, 0x79, 0x34, 0x2c, 0x67, 0xe4, 0xa0, 0xf1, 0x21, 0x79, 0x33, 0xd5, 0x6b, 0x14,\n            0x38, 0x48, 0xde, 0x26, 0x18, 0xdd, 0x68, 0xef, 0x11, 0x23, 0xd2, 0x62, 0xe5, 0x74,\n            0x2c, 0x5d, 0xcb, 0x68, 0x16, 0x92, 0x07, 0x43, 0xd6, 0x5b, 0xf6, 0xa0, 0xe9, 0x96,\n            0x52, 0xb6, 0x9e, 0x6b, 0xec, 0x28, 0x1a, 0x07, 0x98, 0xc2, 0x0d, 0xa1, 0xff, 0x96,\n            0x5d, 0x4f, 0x01, 0xca, 0xee, 0x4c, 0x36, 0xe8, 0x60, 0x07, 0xb9, 0xe4, 0x70, 0x75,\n            0x23, 0x0e, 0xa0, 0xa3, 0xde, 0x3f, 0x3f, 0xf2, 0x9f, 0x66, 0xa7, 0x53, 0x9a, 0x83,\n            0x67, 0x03, 0xf5, 0x9e, 0x7b, 0xce, 0x95, 0x6d, 0xb6, 0xd5, 0xeb, 0x39, 0xab, 0x81,\n            0x3b, 0x29, 0x36, 0x17, 0x8b, 0x7f, 0xec, 0xa0, 0x31, 0x29, 0x7a, 0x2d, 0x0e, 0xd1,\n            0x01, 0xa2, 0x93, 0x0e, 0xaf, 0x42, 0xcb, 0x52, 0x08, 0xc5, 0x5b, 0xc3, 0x73, 0x85,\n            0x59, 0x3d, 0x5a, 0x61, 0x93, 0xa0, 0x6f, 0x4f, 0xc4, 0x24, 0x9b, 0x84, 0xa0, 0x5a,\n            0xbc, 0xae, 0x9d, 0x6b, 0x73, 0xe0, 0xef, 0xce, 0x56, 0x28, 0xae, 0x7f, 0x5b, 0xae,\n            0x4b, 0x8c, 0xcb, 0x19, 0x0d, 0x5c, 0x53, 0xaf, 0x27, 0x1b, 0x57, 0xb1, 0xf2, 0x24,\n            0x71, 0x90, 0x91, 0xa0, 0xfb, 0xdd, 0xb3, 0x36, 0xc8, 0x44, 0x27, 0x69, 0x94, 0xe8,\n            0xe6, 0xaf, 0x33, 0x1c, 0x03, 0x3a, 0xbe, 0x34, 0xab, 0x01, 0x91, 0x21, 0x32, 0x00,\n            0x52, 0x21, 0xd1, 0x28, 0x17, 0x01, 0x15, 0x29, 0xa0, 0xa0, 0x0b, 0x4a, 0xea, 0x6d,\n            0xeb, 0x95, 0x8d, 0x37, 0xf1, 0x65, 0xfa, 0xac, 0x08, 0x02, 0xc5, 0x77, 0x93, 0x9d,\n            0x0a, 0x8c, 0xa8, 0x9c, 0x82, 0xfc, 0x81, 0x53, 0x3c, 0x91, 0x34, 0xce, 0xd5, 0x80,\n        ],\n        [\n            0xf9, 0x02, 0x11, 0xa0, 0x76, 0xdd, 0x54, 0xee, 0xe6, 0x47, 0x07, 0x44, 0x83, 0xdb,\n            0xf1, 0x5b, 0x4d, 0xb5, 0xd4, 0xdf, 0xab, 0xd4, 0x7f, 0x43, 0xc9, 0x1a, 0xa0, 0x5d,\n            0xcd, 0x52, 0x8e, 0x4c, 0x98, 0xee, 0xbb, 0xd8, 0xa0, 0x16, 0xf1, 0xc0, 0x38, 0x60,\n            0xc2, 0xdd, 0xb0, 0x21, 0xe6, 0x28, 0x22, 0x29, 0x56, 0x14, 0xd0, 0x51, 0xc1, 0x80,\n            0x30, 0x7c, 0x6a, 0x3d, 0x1f, 0xc9, 0x84, 0xcd, 0xa9, 0x2e, 0x3a, 0xf8, 0xee, 0xa0,\n            0x79, 0x86, 0xc6, 0xf4, 0x41, 0xe6, 0x6b, 0x41, 0x7f, 0x24, 0x2e, 0xae, 0xfc, 0x3d,\n            0xae, 0x48, 0x28, 0xc7, 0x9a, 0x9c, 0x0e, 0xb4, 0x5f, 0x71, 0xf4, 0x2c, 0x2b, 0x1f,\n            0xc6, 0xc2, 0xb5, 0x6b, 0xa0, 0x32, 0xdd, 0x1d, 0xbf, 0x95, 0x5c, 0xd0, 0x0a, 0xfa,\n            0xdf, 0x48, 0x03, 0x67, 0x5d, 0x19, 0x5d, 0x51, 0xa6, 0xf4, 0x6d, 0x2f, 0x44, 0xdc,\n            0x6e, 0x9f, 0x20, 0x27, 0x09, 0xce, 0x49, 0xa1, 0x46, 0xa0, 0x81, 0x40, 0x18, 0x77,\n            0xdd, 0x0d, 0x38, 0x8d, 0x0b, 0xe7, 0xea, 0x14, 0xb4, 0xa0, 0xb7, 0xda, 0x25, 0xce,\n            0x60, 0x62, 0xaa, 0x0d, 0xcf, 0x34, 0x4e, 0xf3, 0xc2, 0xc0, 0x36, 0xb3, 0x90, 0xc7,\n            0xa0, 0x40, 0xbe, 0xf8, 0xc4, 0xd8, 0x2b, 0xd6, 0x55, 0x69, 0xeb, 0xb3, 0x1d, 0xe2,\n            0x8b, 0xda, 0x9c, 0x4f, 0x3b, 0x04, 0xe4, 0xdb, 0x5b, 0xb7, 0x5f, 0x6e, 0x4c, 0x45,\n            0x51, 0x9e, 0x82, 0x08, 0xda, 0xa0, 0x53, 0x16, 0x37, 0x04, 0xba, 0x1f, 0x4b, 0x91,\n            0x7d, 0x22, 0xf8, 0x95, 0xf0, 0xbe, 0x61, 0x7e, 0x09, 0xed, 0xe7, 0xb3, 0x87, 0xa1,\n            0xfb, 0x38, 0x2d, 0x8f, 0xe5, 0x45, 0x03, 0x1f, 0x76, 0x44, 0xa0, 0x4f, 0x0c, 0x25,\n            0xfc, 0x0e, 0xfb, 0x33, 0x22, 0xb0, 0xbb, 0x17, 0xa5, 0xe4, 0x31, 0x90, 0xd3, 0x64,\n            0x94, 0x51, 0x73, 0x76, 0x4c, 0x91, 0x99, 0x80, 0xb9, 0xbc, 0xcb, 0xe5, 0x14, 0x50,\n            0x3f, 0xa0, 0xfd, 0x5a, 0x44, 0x07, 0xf9, 0x74, 0x16, 0x7a, 0xf1, 0x03, 0xc9, 0x4e,\n            0x48, 0x2b, 0x96, 0x23, 0xbb, 0x43, 0xcf, 0xc3, 0xa7, 0xc7, 0x98, 0x9e, 0x00, 0x21,\n            0xe0, 0x4d, 0x47, 0x31, 0x58, 0x41, 0xa0, 0x35, 0x54, 0x86, 0x0e, 0x3c, 0x56, 0x9c,\n            0x88, 0xb2, 0xa9, 0xb7, 0x3f, 0x72, 0x69, 0x09, 0x48, 0x42, 0xbb, 0x5c, 0x6b, 0x95,\n            0x1e, 0x00, 0xba, 0xae, 0x67, 0xee, 0xfd, 0x6b, 0x67, 0x7e, 0x70, 0xa0, 0x36, 0xb8,\n            0xaf, 0xbf, 0x20, 0x69, 0x30, 0x6b, 0x67, 0x97, 0x30, 0x1f, 0x49, 0xa4, 0xa1, 0x0e,\n            0xe9, 0x8c, 0xa2, 0x5c, 0x6c, 0xc7, 0x6f, 0x10, 0x79, 0xc3, 0xf1, 0x79, 0xf8, 0x90,\n            0x56, 0xdc, 0xa0, 0x46, 0x3d, 0xe5, 0x4b, 0xeb, 0xde, 0xcd, 0x0b, 0x81, 0x24, 0x6f,\n            0xa8, 0xe3, 0xce, 0xbc, 0x08, 0x15, 0xe0, 0xc9, 0x57, 0xce, 0xe9, 0xf2, 0x3e, 0xf3,\n            0xac, 0x7f, 0xda, 0x5a, 0x9a, 0x84, 0x77, 0xa0, 0xda, 0x55, 0x99, 0xe1, 0xf3, 0xd5,\n            0x8e, 0xd6, 0xe4, 0x76, 0x14, 0x5d, 0xbb, 0x68, 0x86, 0xbb, 0x75, 0x06, 0x0e, 0xe4,\n            0x72, 0xdf, 0x78, 0x5f, 0x56, 0xf1, 0x1c, 0x27, 0x4e, 0xfd, 0x06, 0x83, 0xa0, 0x00,\n            0xd4, 0xb1, 0xb2, 0x8d, 0x31, 0x18, 0xc9, 0xe0, 0xc5, 0x6c, 0x8a, 0x23, 0xf5, 0xa2,\n            0x33, 0x4f, 0xec, 0x69, 0x02, 0x9c, 0xfd, 0x31, 0x3f, 0x61, 0xf5, 0x9c, 0x77, 0xe5,\n            0x81, 0x11, 0x6d, 0xa0, 0xe4, 0xad, 0x64, 0x57, 0x5b, 0x73, 0x3d, 0x9e, 0xa9, 0xcd,\n            0xac, 0x97, 0xa4, 0x39, 0xbb, 0xdb, 0xc0, 0x68, 0x47, 0x4f, 0x0e, 0x32, 0xc0, 0xb0,\n            0x44, 0xdf, 0x2e, 0xec, 0xde, 0x07, 0xd4, 0x8a, 0xa0, 0x5c, 0xbe, 0x69, 0xbc, 0x35,\n            0xf0, 0xec, 0x5e, 0xef, 0x19, 0x00, 0xc2, 0x81, 0x71, 0xeb, 0x6b, 0x87, 0xba, 0x0c,\n            0xe2, 0x88, 0x33, 0x8c, 0x74, 0x12, 0x6b, 0xc4, 0x8c, 0x24, 0x06, 0x1a, 0x4b, 0x80,\n        ],\n        [\n            0xf9, 0x01, 0xd1, 0xa0, 0x7d, 0x57, 0xef, 0xba, 0x2b, 0x0d, 0x32, 0xca, 0x17, 0xe6,\n            0x0f, 0x80, 0x42, 0x21, 0x7e, 0xd2, 0x7f, 0x77, 0xad, 0x82, 0x47, 0xd2, 0xe0, 0xe3,\n            0xdb, 0x85, 0xf2, 0xd8, 0x4b, 0xc8, 0xca, 0xcd, 0xa0, 0x22, 0xf3, 0x44, 0xfe, 0xd7,\n            0xc9, 0x8d, 0x17, 0x90, 0x14, 0xdf, 0x35, 0x31, 0x72, 0x3a, 0x24, 0x8e, 0x1a, 0xbb,\n            0xaf, 0x4f, 0xfb, 0x95, 0x4e, 0xa8, 0xb5, 0xa8, 0xfc, 0x93, 0x3b, 0x3f, 0x3a, 0xa0,\n            0x30, 0x96, 0xfa, 0x0f, 0xa1, 0xee, 0x14, 0x6c, 0x8a, 0xa5, 0x86, 0x8f, 0x80, 0x9e,\n            0xe5, 0x77, 0xf3, 0xf5, 0xba, 0xa3, 0x9f, 0x76, 0x86, 0x50, 0x2d, 0x78, 0x4d, 0x8e,\n            0xdc, 0x68, 0xa4, 0xc5, 0xa0, 0x9e, 0xd4, 0xf4, 0x80, 0xf1, 0x4b, 0x8c, 0x09, 0xa8,\n            0x9d, 0x53, 0x0f, 0xc8, 0x75, 0xd1, 0x88, 0x32, 0x02, 0x67, 0x5b, 0x03, 0x6c, 0xd5,\n            0x53, 0xba, 0xa6, 0xb0, 0xee, 0xfc, 0xdf, 0x69, 0xcc, 0xa0, 0xd5, 0x0b, 0x5d, 0xf3,\n            0x05, 0x43, 0xf6, 0x04, 0x71, 0xc6, 0x20, 0x01, 0x37, 0xe9, 0x5a, 0x35, 0x31, 0xa4,\n            0x29, 0xe3, 0x2b, 0x9f, 0xe4, 0x37, 0x24, 0x5c, 0x93, 0x02, 0x28, 0x5c, 0x65, 0x54,\n            0xa0, 0x6a, 0x82, 0x6f, 0x60, 0x96, 0x3d, 0xd4, 0x5f, 0x9d, 0xae, 0x25, 0xdf, 0x46,\n            0xa4, 0x2e, 0x49, 0xe0, 0xb3, 0x42, 0x30, 0xb8, 0xf3, 0xb3, 0xd7, 0xd3, 0xf4, 0x97,\n            0xc4, 0xd1, 0xd0, 0xfb, 0xbc, 0xa0, 0x80, 0xfb, 0x79, 0x1a, 0x67, 0xee, 0x2a, 0xb0,\n            0x2c, 0xcd, 0xba, 0x4e, 0x7c, 0x4c, 0xc6, 0x5d, 0xcf, 0x68, 0x5f, 0xe2, 0xcc, 0xdc,\n            0x69, 0xe9, 0x95, 0xba, 0x3e, 0xb4, 0x54, 0x4c, 0x13, 0x74, 0x80, 0xa0, 0x32, 0x64,\n            0x81, 0x6a, 0xf1, 0x40, 0x08, 0x93, 0x6c, 0xf4, 0x9d, 0x22, 0x15, 0x27, 0x3b, 0x87,\n            0x62, 0x48, 0x9e, 0x74, 0x3f, 0x5b, 0xbb, 0x27, 0x9a, 0x7a, 0xce, 0xe5, 0x1c, 0x0d,\n            0xae, 0xf6, 0xa0, 0x7a, 0x95, 0x0a, 0x56, 0x88, 0x3a, 0xb7, 0x73, 0xc8, 0xd8, 0xba,\n            0x53, 0xe1, 0x6e, 0x7f, 0x97, 0x97, 0xd9, 0x87, 0x58, 0xae, 0xbd, 0x07, 0x8c, 0x55,\n            0xd9, 0x3e, 0x05, 0x30, 0xe1, 0xe0, 0xef, 0xa0, 0x1c, 0x82, 0xa6, 0x9d, 0xa7, 0x6a,\n            0x57, 0xda, 0x45, 0x2a, 0xae, 0x1b, 0x8b, 0x14, 0xa6, 0x2f, 0x63, 0x9a, 0xfc, 0x60,\n            0x78, 0xce, 0x11, 0xb7, 0xbe, 0x60, 0xce, 0xe1, 0x9b, 0x0e, 0x37, 0xda, 0xa0, 0x50,\n            0x86, 0xfe, 0x71, 0x1d, 0x54, 0x09, 0x0c, 0x01, 0x0c, 0x8f, 0x6a, 0x2f, 0xeb, 0xbc,\n            0x34, 0x68, 0xaa, 0xd3, 0x4b, 0xd0, 0x54, 0xfc, 0x62, 0xda, 0x3f, 0x2f, 0x5e, 0x73,\n            0xe4, 0x1b, 0x5c, 0xa0, 0x44, 0x4d, 0xd0, 0x93, 0x34, 0xc9, 0x13, 0x76, 0xad, 0x8e,\n            0xb0, 0xba, 0x83, 0x0d, 0x33, 0x92, 0x09, 0x09, 0xd2, 0xf5, 0x6d, 0xb6, 0x26, 0x57,\n            0x16, 0xc7, 0x25, 0x59, 0x1e, 0xb2, 0x4f, 0x54, 0x80, 0xa0, 0x58, 0xc6, 0xc6, 0xc5,\n            0x8c, 0x2d, 0xe9, 0x50, 0x07, 0xa9, 0xf9, 0x22, 0xc1, 0xb3, 0xbd, 0x03, 0x2f, 0xed,\n            0x1b, 0xc1, 0xa6, 0x82, 0x9c, 0x2e, 0x95, 0x30, 0xcd, 0x16, 0x47, 0x97, 0x6c, 0x52,\n            0xa0, 0x2e, 0x99, 0x02, 0xa0, 0x4b, 0x27, 0xa6, 0x11, 0x11, 0x92, 0x35, 0x31, 0x8c,\n            0x8f, 0x12, 0x63, 0x0d, 0x58, 0xee, 0x77, 0x5a, 0x31, 0xad, 0xe3, 0x57, 0x6b, 0xe9,\n            0x53, 0x42, 0x6e, 0xc2, 0xf6, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        [\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n    ];\n    let storage_leaf = [\n        0xec, 0x9f, 0x20, 0xef, 0xe9, 0x1b, 0x84, 0xa3, 0xf0, 0x73, 0x56, 0x24, 0xd9, 0xb5, 0xa4,\n        0x1f, 0x2f, 0x1f, 0x4a, 0xa0, 0x92, 0xea, 0xac, 0x1f, 0x9d, 0x6a, 0xf0, 0x1f, 0x15, 0x9f,\n        0x3c, 0x08, 0x9e, 0x8b, 0x8a, 0x02, 0x1e, 0x19, 0xe0, 0xc9, 0xba, 0xb2, 0x40, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    ];\n    let storage_depth = 5;\n\n    let value = get_storage_value(storage_value);\n\n    verify(\n        key,\n        value,\n        storage_hash,\n        storage_nodes,\n        storage_leaf,\n        storage_depth,\n    );\n}\n","path":"/Users/kartik/projects/anonworld/anonworld/packages/credentials/src/verifiers/noir-lib/src/proof/mod.nr"},"72":{"source":"mod secp256k1;\n\npub fn ecrecover(\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64], // clip v value\n    hashed_message: [u8; 32],\n) -> Field {\n    let key = secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n\n    assert(key.verify_sig(signature, hashed_message));\n    let addr = key.to_eth_address();\n\n    addr\n}\n\n#[test]\nfn test_ecrecover() {\n    let pub_key_x = [\n        131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223,\n        198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117,\n    ];\n    let pub_key_y = [\n        53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99,\n        12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165,\n    ];\n    let signature = [\n        57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82,\n        71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213,\n        80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23,\n        136, 75, 29, 177,\n    ];\n    let hashed_message = [\n        13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112,\n        68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102,\n    ];\n\n    let addr = ecrecover(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(addr == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/Users/kartik/projects/anonworld/anonworld/packages/credentials/src/verifiers/noir-lib/src/ecrecover/mod.nr"},"73":{"source":"use dep::std;\n\nuse dep::array_helpers;\n\nstruct PubKey {\n    pub_x: [u8; 32],\n    pub_y: [u8; 32],\n}\n\nfn split_uncompressed_pub_key(pub_key: [u8; 65]) -> ([u8; 32], [u8; 32]) {\n    let mut pub_key_x: [u8; 32] = [0; 32];\n    let mut pub_key_y: [u8; 32] = [0; 32];\n\n    for i in 0..32 {\n        pub_key_x[i] = pub_key[i + 1];\n        pub_key_y[i] = pub_key[i + 32 + 1];\n    }\n\n    (pub_key_x, pub_key_y)\n}\n\nimpl PubKey {\n    fn from_xy(pub_x: [u8; 32], pub_y: [u8; 32]) -> PubKey {\n        PubKey { pub_x, pub_y }\n    }\n\n    fn from_unified(pub_key: [u8; 64]) -> PubKey {\n        let (key_x, key_y) = array_helpers::split_u8_64(pub_key);\n\n        PubKey { pub_x: key_x, pub_y: key_y }\n    }\n\n    fn from_uncompressed(pub_key: [u8; 65]) -> PubKey {\n        assert(pub_key[0] == 0x04);\n        let (key_x, key_y) = split_uncompressed_pub_key(pub_key);\n\n        PubKey { pub_x: key_x, pub_y: key_y }\n    }\n\n    fn verify_sig(self, signature: [u8; 64], hashed_message: [u8; 32]) -> bool {\n        std::ecdsa_secp256k1::verify_signature(self.pub_x, self.pub_y, signature, hashed_message)\n    }\n\n    fn to_eth_address(self) -> Field {\n        let pub_key = array_helpers::u8_32_to_u8_64(self.pub_x, self.pub_y);\n        let hashed_pub_key = std::hash::keccak256(pub_key, 64);\n\n        let mut addr: Field = 0;\n        for i in 0..20 {\n            // shift left by 8 and add the new value\n            addr = (addr * 256) + hashed_pub_key[i + 12] as Field;\n        }\n\n        addr\n    }\n\n    fn ecrecover(self, signature: [u8; 64], hashed_message: [u8; 32]) -> Field {\n        assert(self.verify_sig(signature, hashed_message));\n\n        self.to_eth_address()\n    }\n}\n\n#[test]\nfn test_ecrecover_via_key() {\n    let pub_key_x = [\n        131, 24, 83, 91, 84, 16, 93, 74, 122, 174, 96, 192, 143, 196, 95, 150, 135, 24, 27, 79, 223,\n        198, 37, 189, 26, 117, 63, 167, 57, 127, 237, 117,\n    ];\n    let pub_key_y = [\n        53, 71, 241, 28, 168, 105, 102, 70, 242, 243, 172, 176, 142, 49, 1, 106, 250, 194, 62, 99,\n        12, 93, 17, 245, 159, 97, 254, 245, 123, 13, 42, 165,\n    ];\n    let signature = [\n        57, 17, 112, 239, 241, 30, 64, 157, 170, 50, 85, 145, 156, 69, 226, 85, 147, 164, 10, 82,\n        71, 93, 42, 132, 200, 220, 161, 255, 95, 241, 211, 141, 81, 7, 150, 25, 25, 27, 162, 213,\n        80, 61, 12, 170, 50, 4, 154, 203, 252, 229, 119, 29, 202, 153, 50, 25, 126, 145, 245, 23,\n        136, 75, 29, 177,\n    ];\n    let hashed_message = [\n        13, 82, 120, 60, 76, 186, 215, 235, 175, 126, 185, 67, 252, 100, 143, 82, 130, 165, 32, 112,\n        68, 47, 193, 141, 141, 209, 109, 219, 47, 203, 175, 102,\n    ];\n\n    let key = PubKey::from_xy(pub_key_x, pub_key_y);\n    assert(key.ecrecover(signature, hashed_message) == 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266);\n}\n","path":"/Users/kartik/projects/anonworld/anonworld/packages/credentials/src/verifiers/noir-lib/src/ecrecover/secp256k1.nr"},"74":{"source":"pub fn bytes_as_nibbles<let N: u32>(bytes: [u8; N]) -> [u8; N * 2] {\n    let mut nibbles = [0; N * 2];\n    for i in 0..N {\n        let nibs = byte_to_nibbles(bytes[i]);\n        nibbles[i * 2] = nibs.0;\n        nibbles[i * 2 + 1] = nibs.1;\n    }\n    nibbles\n}\n\npub fn byte_to_nibbles(b: u8) -> (u8, u8) {\n    let upper = b >> 4;\n    let lower = b - 16 * upper;\n\n    (upper, lower)\n}\n","path":"/Users/kartik/projects/anonworld/anonworld/packages/credentials/src/verifiers/noir-lib/src/bytes/mod.nr"},"75":{"source":"use dep::std::wrapping_sub;\n\npub global RLP_DATA_TYPE_STRING = 0;\npub global RLP_DATA_TYPE_LIST = 1;\n\npub struct RlpFragment {\n    pub offset: u32,\n    pub length: u32,\n    pub data_type: u32,\n}\n\npub unconstrained fn decode_rlp_list_fragments<let NODE_LEN: u32, let MAX_FIELDS: u32>(\n    rlp_header: RlpFragment,\n    node: [u8; NODE_LEN],\n) -> BoundedVec<RlpFragment, MAX_FIELDS> {\n    let node_len = rlp_header.length + rlp_header.offset;\n    let mut rlp_list = BoundedVec::new();\n    let mut curr_offset = rlp_header.offset;\n    for _ in 0..MAX_FIELDS {\n        if (curr_offset < node_len) {\n            let field_prefix = node[curr_offset];\n\n            let field_offset = if field_prefix < 0x80 { 0 } else { 1 };\n            let field_length = if field_prefix < 0x80 {\n                1\n            } else {\n                wrapping_sub(field_prefix as u32, 0x80)\n            };\n\n            rlp_list.push(\n                RlpFragment {\n                    offset: curr_offset + field_offset,\n                    length: field_length,\n                    data_type: RLP_DATA_TYPE_STRING,\n                },\n            );\n\n            curr_offset += field_length + field_offset;\n        }\n    }\n\n    rlp_list\n}\n\npub unconstrained fn decode_rlp_header<let NODE_LEN: u32>(node: [u8; NODE_LEN]) -> RlpFragment {\n    let (prefix, data) = node.as_slice().pop_front();\n\n    if (prefix < 0x80) {\n        // 1 byte\n        RlpFragment { offset: 0 as u32, length: 1 as u32, data_type: RLP_DATA_TYPE_STRING }\n    } else if (prefix < 0xb8) {\n        // 0-55 byte string\n        RlpFragment {\n            offset: 1,\n            length: wrapping_sub(prefix, 0x80) as u32,\n            data_type: RLP_DATA_TYPE_STRING,\n        }\n    } else if (prefix < 0xc0) {\n        // > 55 byte string\n        RlpFragment {\n            offset: wrapping_sub(1 + prefix, 0xb7) as u32,\n            length: extract_payload_len(data, wrapping_sub(prefix, 0xb7) as u32),\n            data_type: RLP_DATA_TYPE_STRING,\n        }\n    } else if (prefix < 0xf8) {\n        // 0-55 byte array\n        RlpFragment {\n            offset: 1,\n            length: wrapping_sub(prefix, 0xc0) as u32,\n            data_type: RLP_DATA_TYPE_LIST,\n        }\n    } else {\n        // > 55 byte array\n        RlpFragment {\n            offset: wrapping_sub(1 + prefix, 0xf7) as u32,\n            length: extract_payload_len(data, wrapping_sub(prefix, 0xf7) as u32),\n            data_type: RLP_DATA_TYPE_LIST,\n        }\n    }\n}\n\nfn extract_payload_len(data: [u8], len: u32) -> u32 {\n    let data_len = data.len();\n    let mut node_len = 0;\n    for i in 0..2 {\n        if (i < len & i < data_len) {\n            node_len = data[i] as u32 + node_len * 256;\n        }\n    }\n\n    node_len\n}\n\npub fn encode_rlp_string<let N: u32>(data: [u8; N]) -> [u8; N] {\n    let length = data.len();\n    let mut result = [0; N];\n\n    // Find first non-zero byte using for loop\n    let mut start_idx = 0;\n    for i in 0..N {\n        if (start_idx == 0) & (data[i] != 0) {\n            start_idx = i;\n        }\n    }\n\n    // If all zeros, return single zero byte\n    if (start_idx == 0) & (data[0] == 0) {\n        result[0] = 0x80;\n        result\n    }\n\n    let actual_length = length - start_idx;\n\n    if (actual_length == 1) & (data[start_idx] < 0x80) {\n        // Single byte < 0x80\n        result[0] = data[start_idx];\n    } else {\n        // 0-55 bytes string\n        result[0] = (0x80 + actual_length) as u8;\n        for i in 0..N {\n            if i < actual_length {\n                result[i + 1] = data[start_idx + i];\n            }\n        }\n    }\n\n    result\n}\n","path":"/Users/kartik/projects/anonworld/anonworld/packages/credentials/src/verifiers/noir-lib/src/rlp/mod.nr"}},"names":["main"],"brillig_names":["get_key_hash","decode_rlp_header","get_node_hash","decode_rlp_list_fragments","copy","decode_rlp_header","get_node_hash","decode_rlp_list_fragments","copy","decode_rlp_list_fragments","get_start_idx","field_less_than","decompose_hint","lte_hint","directive_integer_quotient","directive_invert"]}